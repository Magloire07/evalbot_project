


ARM Macro Assembler    Page 1 


    1 00000000         ;-------------------------------------------------------
                       -----
    2 00000000         ;#Authors
    3 00000000         ;@Kokou KOMBEDE
    4 00000000         ;@Ounissa SADAOUI
    5 00000000         ;Parcours E3FI-3I
    6 00000000         ;année 2024-2025
    7 00000000         ;-------------------------------------------------------
                       ------
    8 00000000         ; RK - Evalbot (Cortex M3 de Texas Instrument)
    9 00000000         ; programme - Pilotage  Evalbot pour parcouris un labyri
                       nthe
   10 00000000         ;-------------------------------------------------------
                       -------
   11 00000000         
   12 00000000                 AREA             |.text|, CODE, READONLY
   13 00000000         
   14 00000000         ; This register controls the clock gating logic in norma
                       l Run mode
   15 00000000 400FE108 
                       SYSCTL_PERIPH_GPIO
                               EQU              0x400FE108  ; SYSCTL_RCGC2_R (p
                                                            291 datasheet de lm
                                                            3s9b92.pdf)
   16 00000000         
   17 00000000 40025000 
                       GPIO_PORTF_BASE
                               EQU              0x40025000  ; adresse de base  
                                                            Port F (LEDs)(base:
                                                             0x4002.5000)
   18 00000000         
   19 00000000 40024000 
                       GPIO_PORTE_BASE
                               EQU              0x40024000  ; GPIO Port E  (Bum
                                                            pers) base: 0x4002.
                                                            4000
   20 00000000         
   21 00000000 40007000 
                       GPIO_PORTD_BASE
                               EQU              0x40007000  ; GPIO Port D (Swit
                                                            chs) base: 0x4000.7
                                                            000
   22 00000000         
   23 00000000         ; configure the corresponding pin to be an output
   24 00000000 00000400 
                       GPIO_O_DIR
                               EQU              0x00000400  ; GPIO Direction (p
                                                            417 datasheet de lm
                                                            3s9B92.pdf)
   25 00000000         
   26 00000000         ; The GPIODR2R register is the 2-mA drive control regist
                       er
   27 00000000         ; By default, all GPIO pins have 2-mA drive.
   28 00000000 00000500 
                       GPIO_O_DR2R
                               EQU              0x00000500  ; GPIO 2-mA Drive S
                                                            elect (p428 datashe
                                                            et de lm3s9B92.pdf)
                                                            



ARM Macro Assembler    Page 2 


   29 00000000         
   30 00000000         ; Digital enable register
   31 00000000         ; To use the pin as a digital input or output, the corre
                       sponding GPIODEN bit must be set.
   32 00000000 0000051C 
                       GPIO_O_DEN
                               EQU              0x0000051C  ; GPIO Digital Enab
                                                            le (p437 datasheet 
                                                            de lm3s9B92.pdf)
   33 00000000         
   34 00000000         ; Pul_up
   35 00000000 00000510 
                       GPIO_I_PUR
                               EQU              0x00000510  ; GPIO Pull-Up (p43
                                                            2 datasheet de lm3s
                                                            9B92.pdf)
   36 00000000         
   37 00000000         ;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^DECLARATION PINS ou BROCH
                       ES ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   38 00000000         ; LED
   39 00000000 00000010 
                       BROCHE_4
                               EQU              0x10        ; led1
   40 00000000 00000020 
                       BROCHE_5
                               EQU              0x20        ; led2 
   41 00000000 00000030 
                       BROCHE4_5
                               EQU              0x30        ; led1 & led2 sur b
                                                            roche 4 et 5 0b0011
                                                            0000
   42 00000000         ; BUMPER
   43 00000000 00000001 
                       BROCHE0 EQU              0x1         ; bumper_R
   44 00000000 00000002 
                       BROCHE1 EQU              0x2         ; bumper_L
   45 00000000 00000003 
                       BROCHE0_1
                               EQU              0x3         ; bumperR_L
   46 00000000         ; SWITCH
   47 00000000 00000040 
                       BROCHE_6
                               EQU              0x40        ; switch1
   48 00000000 00000080 
                       BROCHE_7
                               EQU              0x80        ; switch2 
   49 00000000 000000C0 
                       BROCHE6_7
                               EQU              0xC0        ; sw1 et sw2
   50 00000000         
   51 00000000 00060000 
                       DUREE   EQU              0x60000     ; durée fréquence c
                                                            lignotement multipl
                                                            e  
   52 00000000         ;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   53 00000000         ;; registres utilisés 
   54 00000000         ;;---------------------------------------------
   55 00000000         ;;   R0  R1 R2  R3  R4  R5  R6  R7 R8  R9 R10 R11 , R12



ARM Macro Assembler    Page 3 


   56 00000000         ;;---------------------------------------------
   57 00000000         ;; registres réservés 
   58 00000000         ;;---------------------------------------------
   59 00000000         ;;  R2  R5  R9 R11, R12
   60 00000000         ;;---------------------------------------------
   61 00000000         ;; usages courants des régistres
   62 00000000         ;;---------------------------------------
   63 00000000         ;; r3,r2,r6 pour lire les pins de leds et allumer puis é
                       teindre
   64 00000000         ;; r7,r8,r10 pour lire les pins des switchs et bumpers 
   65 00000000         ;;
   66 00000000         ;; r9 pour contenir l'adresse de tableau des instruction
                       s
   67 00000000         ;; r2 contient la valeur immediate 0 pour eteindre les l
                       eds
   68 00000000         ;; r5 compteur des indices pour parcourir la mémoire(tab
                       leau)
   69 00000000         ;; r11 contient les codes de direction (1 pour gauche 2 
                       pour droite)
   70 00000000         ;; r12 compteur pour savoir si les 3 scénarios sont term
                       inés 
   71 00000000         ;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   72 00000000                 ENTRY
   73 00000000                 EXPORT           __main
   74 00000000                 EXPORT           DEMARRAGE
   75 00000000                 EXPORT           Clignotement
   76 00000000                 EXPORT           GPIO_PORTD_BASE
   77 00000000                 EXPORT           GPIO_PORTE_BASE
   78 00000000                 EXPORT           BROCHE0
   79 00000000                 EXPORT           BROCHE1
   80 00000000                 EXPORT           WAIT
   81 00000000                 EXPORT           clignoteAuClic
   82 00000000                 EXPORT           WAITREC
   83 00000000                 EXPORT           WAIT45
   84 00000000         ;; The IMPORT command specifies that a symbol is defined
                        in a shared object at runtime.
   85 00000000                 IMPORT           MOTEUR_INIT ; initialise les mo
                                                            teurs (configure le
                                                            s pwms + GPIO)
   86 00000000         
   87 00000000                 IMPORT           MOTEUR_DROIT_ON ; activer le mo
                                                            teur droit
   88 00000000                 IMPORT           MOTEUR_DROIT_OFF ; déactiver le
                                                             moteur droit
   89 00000000                 IMPORT           MOTEUR_DROIT_AVANT ; moteur dro
                                                            it tourne vers l'av
                                                            ant
   90 00000000                 IMPORT           MOTEUR_DROIT_ARRIERE ; moteur d
                                                            roit tourne vers l'
                                                            arrière
   91 00000000                 IMPORT           MOTEUR_DROIT_INVERSE ; inverse 
                                                            le sens de rotation
                                                             du moteur droit
   92 00000000         
   93 00000000                 IMPORT           MOTEUR_GAUCHE_ON ; activer le m
                                                            oteur gauche
   94 00000000                 IMPORT           MOTEUR_GAUCHE_OFF ; déactiver l
                                                            e moteur gauche



ARM Macro Assembler    Page 4 


   95 00000000                 IMPORT           MOTEUR_GAUCHE_AVANT ; moteur ga
                                                            uche tourne vers l'
                                                            avant
   96 00000000                 IMPORT           MOTEUR_GAUCHE_ARRIERE ; moteur 
                                                            gauche tourne vers 
                                                            l'arrière
   97 00000000                 IMPORT           MOTEUR_GAUCHE_INVERSE ; inverse
                                                             le sens de rotatio
                                                            n du moteur gauche
   98 00000000         
   99 00000000                 IMPORT           PARCOURS_LABYRINTHE2
  100 00000000         
  101 00000000                 IMPORT           MOTEUR_DROIT_MIN
  102 00000000                 IMPORT           MOTEUR_GAUCHE_MIN
  103 00000000                 IMPORT           WAIT_MIN
  104 00000000                 IMPORT           MOTEUR_DROIT_MAX
  105 00000000                 IMPORT           MOTEUR_GAUCHE_MAX
  106 00000000         
  107 00000000         
  108 00000000         ;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  109 00000000         __main
  110 00000000         
  111 00000000 F8DF 92C0       LDR              R9, =buffer ; Charger l'adresse
                                                             de buffer dans R0
  112 00000004 F04F 0200       mov              r2, #0x000  ; pour eteindre LED
                                                            
  113 00000008 F04F 0500       mov              R5, #0      ; compteur de d'ind
                                                            ice dans la tableau
                                                             lors de l'écriture
                                                             elle vaudra aussi 
                                                            pour taille du tabl
                                                            eau 
  114 0000000C         ;mov R11,#0             ; compteur de d'indice dans la t
                       ableau lors de la lecture
  115 0000000C F04F 0C00       mov              R12,#0      ; compteur du nombr
                                                            e de parcours de la
                                                            byrinthe, si elle v
                                                            aut deux alors c'es
                                                            t la toute fin , on
                                                             dessine infini
  116 00000010         
  117 00000010         
  118 00000010 4EAD            ldr              r6, =SYSCTL_PERIPH_GPIO ;; RCGC
                                                            2 l'adresse pour ac
                                                            tiver l'horloge
  119 00000012 F04F 0038       mov              r0, #0x00000038 ;;  Horloge sur
                                                             les port E , F  et
                                                             D où sont branchés
                                                             bumpers, les leds 
                                                            et les switchs(0x38
                                                             == 0b111000)
  120 00000016 6030            str              r0, [r6]    ;;  Activation de l
                                                            'horloge pour les p
                                                            orts
  121 00000018         ;; "There must be a delay of 3 system clocks before any 
                       GPIO reg. access  (p413 datasheet de lm3s9B92.pdf)
  122 00000018         ;; 3 coup d'horloge  pour que l'activation soit affectiv
                       e 



ARM Macro Assembler    Page 5 


  123 00000018 BF00            nop                          ;; tres tres import
                                                            ant....
  124 0000001A BF00            nop
  125 0000001C BF00            nop                          ;; pas necessaire e
                                                            n simu ou en debbug
                                                             step by step...
  126 0000001E         
  127 0000001E         
  128 0000001E         ;--------------------------------------------------CONFI
                       GURATION LED 4_5----------------------------------------
                       ------------------------------     
  129 0000001E         
  130 0000001E 4EAB            ldr              r6, = GPIO_PORTF_BASE+GPIO_O_DI
R 
                                                            ;; configuration de
                                                            s led periphérque d
                                                            e sortie (broche 4 
                                                            et 5 : 00110000)
  131 00000020 F04F 0030       ldr              r0, = BROCHE4_5
  132 00000024 6030            str              r0, [r6]
  133 00000026         
  134 00000026 4EAA            ldr              r6, = GPIO_PORTF_BASE+GPIO_O_DE
N 
                                                            ;; Enable Digital F
                                                            unction (activation
                                                             de la conversion  
                                                            numerique analogiqu
                                                            e)
  135 00000028 F04F 0030       ldr              r0, = BROCHE4_5
  136 0000002C 6030            str              r0, [r6]
  137 0000002E         
  138 0000002E 4EA9            ldr              r6, = GPIO_PORTF_BASE+GPIO_O_DR
2R 
                                                            ;; Choix de l'inten
                                                            sité de sortie (2mA
                                                            )
  139 00000030 F04F 0030       ldr              r0, = BROCHE4_5
  140 00000034 6030            str              r0, [r6]
  141 00000036         ;-------------------------------------------------------
                       CONFIGURATION Bumper0_1---------------------------------
                       --------------------------------
  142 00000036 4EA8            ldr              r6, = GPIO_PORTE_BASE+GPIO_I_PU
R 
                                                            ;; Pul_up (activati
                                                            on de la resistance
                                                             )
  143 00000038 F04F 0003       ldr              r0, = BROCHE0_1
  144 0000003C 6030            str              r0, [r6]
  145 0000003E         
  146 0000003E 4EA7            ldr              r6, = GPIO_PORTE_BASE+GPIO_O_DE
N 
                                                            ; Enable Digital Fu
                                                            nction (activation 
                                                            de la conversion  n
                                                            umerique analogique
                                                            )
  147 00000040 F04F 0003       ldr              r0, = BROCHE0_1
  148 00000044 6030            str              r0, [r6]
  149 00000046         ;-------------------------------------------------------



ARM Macro Assembler    Page 6 


                       CONFIGURATION Switch6_7---------------------------------
                       --------------------------------
  150 00000046 4EA6            ldr              r6, = GPIO_PORTD_BASE+GPIO_I_PU
R 
                                                            ; Pul_up 
  151 00000048 F04F 00C0       ldr              r0, = BROCHE6_7
  152 0000004C 6030            str              r0, [r6]
  153 0000004E         
  154 0000004E 4EA5            ldr              r6, = GPIO_PORTD_BASE+GPIO_O_DE
N 
                                                            ;; Enable Digital F
                                                            unction 
  155 00000050 F04F 00C0       ldr              r0, = BROCHE6_7
  156 00000054 6030            str              r0, [r6]
  157 00000056         
  158 00000056         ;-------------------------------------------------------
                       --------------------------------------------------------
                       ---------   
  159 00000056         ; Configure les PWM + GPIO
  160 00000056 F7FF FFFE       BL               MOTEUR_INIT
  161 0000005A         ;-------------------------------------------------------
                       --------------------------------------------------------
                       ---------   
  162 0000005A         ; allumage des deux leds
  163 0000005A F04F 0330       mov              r3, #BROCHE4_5
  164 0000005E 4EA2            ldr              r6, = GPIO_PORTF_BASE + (BROCHE
4_5<<2)
  165 00000060 6033            str              r3, [r6]
  166 00000062         
  167 00000062         ;---------------------------------------------LECTURE DU
                        PREMIER APPUIS LONG -----------------------------------
                       -----------------------------------     
  168 00000062         ReadState
  169 00000062 4FA2            ldr              r7, = GPIO_PORTD_BASE + (BROCHE
_6<<2)
  170 00000064 F8D7 A000       ldr              r10,[r7]
  171 00000068 F1BA 0F00       CMP              r10,#0x00
  172 0000006C D1F9            BNE              ReadState
  173 0000006E E041            B                checkAppuisLong
  174 00000070         ;----------------------------------------------DEBUIT PR
                       OGRAMMATION DES DIRECTIONS -----------------------------
                       ---------------------------------------------   
  175 00000070         DebutProgrammation
  176 00000070 F7FF FFFE       BL               Clignotement
  177 00000074         ReadGauche
  178 00000074 4F9D            ldr              r7, = GPIO_PORTD_BASE + (BROCHE
_6<<2) 
                                                            ; affectation du sw
                                                            itch 1 
  179 00000076 F8D7 A000       ldr              r10,[r7]    ; lecture de l'état
                                                             du switch 1
  180 0000007A F1BA 0F00       CMP              r10,#0x00   ; vérifier si c'est
                                                             appuyé
  181 0000007E D108            BNE              ReadDroit   ; on  branche vers 
                                                            le switch1( gauche)
                                                             pour tester  si ja
                                                            mais le droit n'est
                                                             pas appuyé 
  182 00000080 E043            B                checkAppuisLongGauche ; on véri



ARM Macro Assembler    Page 7 


                                                            fie si l'appuis est
                                                             long
  183 00000082         ;-------------------------------------------------------
                       --------------------------------------------------------
                       ---------
  184 00000082         appuisCourtGauche
  185 00000082         ; on allume la led gauche pour signaler le clic 
  186 00000082 F04F 0320       mov              r3, #BROCHE_5
  187 00000086 4E9A            ldr              r6, = GPIO_PORTF_BASE + (BROCHE
_5<<2)
  188 00000088 F7FF FFFE       BL               clignoteAuClic 
                                                            ; gère l'allumage
  189 0000008C         
  190 0000008C         ; on définit l'entier correspondant à la direction gauch
                       e 
  191 0000008C F04F 0A01       mov              r10,#1      ; 1 pour  gauche 
  192 00000090 E02B            B                ecrireDirection ; écrir dans bu
                                                            ffer la direction 
  193 00000092         ;-------------------------------------------------------
                       --------------------------------------------------------
                       ---------
  194 00000092         ReadDroit
  195 00000092 4F98            ldr              r7, = GPIO_PORTD_BASE + (BROCHE
_7<<2)
  196 00000094 F8D7 A000       ldr              r10,[r7]
  197 00000098 F1BA 0F00       CMP              r10,#0x00
  198 0000009C D1EA            BNE              ReadGauche
  199 0000009E E03F            B                checkAppuisLongDroit ; on vérif
                                                            i si l'appuis est l
                                                            ong ou court
  200 000000A0         ;-------------------------------------------------------
                       --------------------------------------------------------
                       ---------
  201 000000A0         appuisCourtDroit                     ; si on arrive à ce
                                                            tte étiquette alors
                                                             l'appuis est court
                                                            
  202 000000A0         ; on allume la led droite pour signaler le clic 
  203 000000A0 F04F 0310       mov              r3, #BROCHE_4
  204 000000A4 4E94            ldr              r6, = GPIO_PORTF_BASE + (BROCHE
_4<<2)
  205 000000A6 F7FF FFFE       BL               clignoteAuClic 
                                                            ; gère l'allumage
  206 000000AA         
  207 000000AA         ; on définit l'entier correspondant à la direction gauch
                       e 
  208 000000AA F04F 0A02       mov              r10,#2      ; 2 pour  droite 
  209 000000AE E01C            B                ecrireDirection ; écrir dans ta
                                                            bleau la direction 
                                                            
  210 000000B0         
  211 000000B0         ;------------------------------------------------FIN PRO
                       GRAMMATION DES DIRECTIONS-------------------------------
                       ---------------------------------
  212 000000B0         ; le programme est enregistré maintemant
  213 000000B0         ; on peut parcourir le labyrinthe
  214 000000B0         FinProgrammation
  215 000000B0         ; on on clignote pour signaler fin de la programmation 
  216 000000B0 F04F 0330       mov              r3, #BROCHE4_5



ARM Macro Assembler    Page 8 


  217 000000B4 4E8C            ldr              r6, = GPIO_PORTF_BASE + (BROCHE
4_5<<2)
  218 000000B6 F7FF FFFE       BL               Clignotement
  219 000000BA         
  220 000000BA         ;------------------------------------------------CLIC SU
                       R SWITCH1 POUR COMMENCER--------------------------------
                       --------------------------------
  221 000000BA         DEMARRAGE
  222 000000BA F04F 0B00       mov              R11,#0      ; compteur de d'ind
                                                            ice dans la tableau
                                                             lors de la lecture
                                                            
  223 000000BE 4F8B            ldr              r7, = GPIO_PORTD_BASE + (BROCHE
_6<<2)
  224 000000C0 F8D7 A000       ldr              r10,[r7]
  225 000000C4 F1BA 0F00       CMP              r10,#0x00
  226 000000C8 D1FE            BNE              DEMARRAGE
  227 000000CA F7FF FFFE       BL               clignoteAuClic
  228 000000CE F7FF FFFE       BL               WAIT
  229 000000D2         ;---------------------------------------------------PARC
                       OURS DU LABYRINTHE 1------------------------------------
                       -------------------------  
  230 000000D2 F10C 0C01       ADD              R12,#1      ; On incrément  le 
                                                            compteur de parcour
                                                            s 
  231 000000D6         
  232 000000D6         
  233 000000D6         
  234 000000D6         
  235 000000D6         parcours
  236 000000D6         ; Activer les deux moteurs droit et gauche
  237 000000D6 F7FF FFFE       BL               MOTEUR_DROIT_ON
  238 000000DA F7FF FFFE       BL               MOTEUR_GAUCHE_ON
  239 000000DE         ; Evalbot avance droit devant
  240 000000DE F7FF FFFE       BL               MOTEUR_DROIT_AVANT
  241 000000E2 F7FF FFFE       BL               MOTEUR_GAUCHE_AVANT
  242 000000E6         
  243 000000E6 E04F            B                testCollision
  244 000000E8         
  245 000000E8 E7F5            b                parcours
  246 000000EA         
  247 000000EA         
  248 000000EA         
  249 000000EA         
  250 000000EA         ;-----------------------------------------------FIN PARC
                       OURS DU LABYRINTHE--------------------------------------
                       -----------------------------------  
  251 000000EA         
  252 000000EA         ecrireDirection
  253 000000EA F809 A005       STRB             R10, [R9, R5] ; écrire dans le 
                                                            tableau à l'indice 
                                                            indiqué par R5
  254 000000EE F105 0501       ADD              R5,#1       ; incrémentation du
                                                             compteur 
  255 000000F2 E7BF            B                ReadGauche  ; on retourne à la 
                                                            lecture des directi
                                                            on 
  256 000000F4         
  257 000000F4         ;-----------------------------------------------DEBUT LO



ARM Macro Assembler    Page 9 


                       GIQUE APUIS LONG ---------------------------------------
                       ---------------------------------- 
  258 000000F4         ;dureé R1 correspond à la duree 
  259 000000F4         ;de l'appuis long  envirion 2seconde
  260 000000F4 F44F 217F 
                       checkAppuisLong
                               ldr              r1, =0xFF000
  261 000000F8         wait0
  262 000000F8 4F7C            ldr              r7, = GPIO_PORTD_BASE + (BROCHE
_6<<2)
  263 000000FA F8D7 A000       ldr              r10,[r7]
  264 000000FE F1BA 0F00       CMP              r10,#0x00
  265 00000102 D1AE            BNE              ReadState   ; si l'utilisateur 
                                                            relâche pendant le 
                                                            wait  c'est à dire 
                                                             r10=0x01 , on reco
                                                            mmence 
  266 00000104 3901            subs             r1, #1
  267 00000106 D1F7            bne              wait0
  268 00000108 E7B2            B                DebutProgrammation
  269 0000010A         
  270 0000010A         ;-------------------------------------------------------
                       --------------------------------------------------------
                       ---------
  271 0000010A         checkAppuisLongGauche
  272 0000010A F44F 217F       ldr              r1, =0xFF000 ; R1 correspond à 
                                                            la duree de l'appui
                                                            s long 
  273 0000010E         wait01
  274 0000010E 4F77            ldr              r7, = GPIO_PORTD_BASE + (BROCHE
_6<<2)
  275 00000110 F8D7 A000       ldr              r10,[r7]
  276 00000114 F1BA 0F00       CMP              r10,#0x00
  277 00000118 D1B3            BNE              appuisCourtGauche ; si l'utilis
                                                            ateur relâche penda
                                                            nt le wait  c'est-à
                                                            -dire  r10=0x01 , c
                                                            'est un appuis cour
                                                            t sur gauche 
  278 0000011A 3901            subs             r1, #1      ; sinon on continue
                                                             de lire dans que d
                                                            urée n'est pas acro
                                                            ulé
  279 0000011C D1F7            bne              wait01
  280 0000011E E7C7            B                FinProgrammation ; si on arrive
                                                             ici alor l'appuis 
                                                            est long donc c'est
                                                             la fin de la progr
                                                            ammation 
  281 00000120         ;-------------------------------------------------------
                       --------------------------------------------------------
                       ---------
  282 00000120         checkAppuisLongDroit
  283 00000120 F44F 217F       ldr              r1, =0xFF000 ; correspond à la 
                                                            duree de l'appuis l
                                                            ong 
  284 00000124         wait02
  285 00000124 4F73            ldr              r7, = GPIO_PORTD_BASE + (BROCHE
_7<<2)



ARM Macro Assembler    Page 10 


  286 00000126 F8D7 A000       ldr              r10,[r7]
  287 0000012A F1BA 0F00       CMP              r10,#0x00
  288 0000012E D1B7            BNE              appuisCourtDroit ; si l'utilisa
                                                            teur relâche pendan
                                                            t le wait  c'est-à-
                                                            dire r10=0x01 , c'e
                                                            st un appuis court 
                                                            sur droit
  289 00000130 3901            subs             r1, #1
  290 00000132 D1F7            bne              wait02
  291 00000134 E7BC            B                FinProgrammation
  292 00000136         ;------------------------------------------------DEBUT L
                       OGIQUES DE CLIGNOTEMENTS -------------------------------
                       -----------------------------------------
  293 00000136         ; logique du clignote simple  à chaque touche 
  294 00000136         clignoteAuClic
  295 00000136 4971            ldr              r1, =0xFFFFF ; durée d'allumage
                                                            
  296 00000138 6033            str              r3, [r6]    ; allumer la led co
                                                            rrespondant dans R3
                                                            
  297 0000013A 3901    wait21  subs             r1, #1
  298 0000013C D1FD            bne              wait21
  299 0000013E 6032            str              r2, [r6]    ;; Eteint LED car r
                                                            2 = 0x00      
  300 00000140 4770            BX               LR          ;; retour à l'endro
                                                            it ou clignoteAuCli
                                                            c est appeler 
  301 00000142         ;-------------------------------------------------------
                       --------------------------------------------------------
                       ---------
  302 00000142         ; logique de clignotement multiple   avant et apprès le 
                       programmation 
  303 00000142         Clignotement
  304 00000142 F04F 0403       ldr              r4, =0x3    ; durée de clignote
                                                            ment 3 * 2 * DUREE
  305 00000146 F04F 0330       mov              r3, #BROCHE4_5
  306 0000014A 4E67            ldr              r6, = GPIO_PORTF_BASE + (BROCHE
4_5<<2)
  307 0000014C 6033            str              r3, [r6]    ;; Allume LED1&2 po
                                                            rtF broche 4&5 : 00
                                                            110000 (contenu de 
                                                            r3)
  308 0000014E         loop
  309 0000014E 6032            str              r2, [r6]    ;; Eteint LED car r
                                                            2 = 0x00      
  310 00000150 F44F 21C0       ldr              r1, = DUREE ;; pour la duree de
                                                             la boucle d'attent
                                                            e1 (wait1)
  311 00000154         
  312 00000154 3901    wait1   subs             r1, #1
  313 00000156 D1FD            bne              wait1
  314 00000158         
  315 00000158 6033            str              r3, [r6]    ;; Allume LED1&2 po
                                                            rtF broche 4&5 : 00
                                                            110000 (contenu de 
                                                            r3)
  316 0000015A F44F 21C0       ldr              r1, = DUREE ;; pour la duree de
                                                             la boucle d'attent



ARM Macro Assembler    Page 11 


                                                            e2 (wait2)
  317 0000015E         
  318 0000015E 3901    wait2   subs             r1, #1
  319 00000160 D1FD            bne              wait2
  320 00000162         
  321 00000162 3C01            subs             r4, #1      ; contrôle le temp 
                                                            de clignotement 
  322 00000164 D1F3            bne              loop
  323 00000166         
  324 00000166 6032            str              r2, [r6]    ;; Eteint LED car r
                                                            2 = 0x00      
  325 00000168 4770            BX               LR
  326 0000016A         ;---------------------------------------------- WAIT ---
                       --------------------------------------------------------
                       ---------------
  327 0000016A         ;; Boucle d'attente   simple  sans rien faire 
  328 0000016A F44F 0120 
                       WAIT    ldr              r1, =0xA00000
  329 0000016E 3901    wait3   subs             r1, #1
  330 00000170 D1FD            bne              wait3
  331 00000172 4770            BX               LR
  332 00000174         
  333 00000174         ;; Boucle pour faire 45°
  334 00000174 F44F 01A0 
                       WAIT45  ldr              r1, =0x500000
  335 00000178 3901    wait45  subs             r1, #1
  336 0000017A D1FD            bne              wait45
  337 0000017C 4770            BX               LR
  338 0000017E         
  339 0000017E         ;; attende pour reculer 
  340 0000017E F44F 1100 
                       WAITREC ldr              r1, =0x200000
  341 00000182 3901    waitrec subs             r1, #1
  342 00000184 D1FD            bne              waitrec
  343 00000186 4770            BX               LR
  344 00000188         ;----------------------------------TEST DE COLLISION ---
                       --------------------------------------------------------
                       ---------------------------
  345 00000188         
  346 00000188         testCollision
  347 00000188 4F5D            ldr              r7, = GPIO_PORTE_BASE + (BROCHE
0<<2)
  348 0000018A F8DF 8178       ldr              r8, = GPIO_PORTE_BASE + (BROCHE
1<<2)
  349 0000018E         
  350 0000018E F8D8 A000       ldr              r10,[r8]    ; lecture de l'état
                                                             du bp_0
  351 00000192 683C            ldr              r4,[r7]     ; lecture de l'état
                                                             du bp_1
  352 00000194 F1BA 0F00       CMP              r10,#0x00
  353 00000198 D106            BNE              testBp1
  354 0000019A F7FF FFFE       BL               MOTEUR_GAUCHE_OFF ; déactiver l
                                                            e moteur gauche
  355 0000019E F7FF FFFE       BL               MOTEUR_DROIT_OFF ; déactiver le
                                                             moteur droit
  356 000001A2 F7FF FFFE       BL               Clignotement ; on clignote à ch
                                                            aque collision 
  357 000001A6 E008            B                lectureMemoire
  358 000001A8         



ARM Macro Assembler    Page 12 


  359 000001A8         
  360 000001A8         testBp1
  361 000001A8 2C00            CMP              r4,#0x00
  362 000001AA D194            BNE              parcours
  363 000001AC F7FF FFFE       BL               MOTEUR_GAUCHE_OFF ; déactiver l
                                                            e moteur gauche
  364 000001B0 F7FF FFFE       BL               MOTEUR_DROIT_OFF ; déactiver le
                                                             moteur droit
  365 000001B4 F7FF FFFE       BL               Clignotement ; on clignote à ch
                                                            aque collision
  366 000001B8         
  367 000001B8 E7FF            B                lectureMemoire
  368 000001BA         ;----------------------------------LECTURE  MEMOIRE ----
                       --------------------------------------------------------
                       --------------------------
  369 000001BA         lectureMemoire
  370 000001BA F819 400B       LDRB             R4, [R9, R11] ; Charger l'octet
                                                             suivant dans R4 (b
                                                            uffer[R11])
  371 000001BE 2C01            CMP              R4, #1
  372 000001C0 D01A            BEQ              tourneAGauche ; sinon tourne à 
                                                            gauche  R4 vaut 1 d
                                                            ans ce cas
  373 000001C2 2C02            CMP              R4, #2
  374 000001C4 D0FF            BEQ              tourneADroite ; si 2 tourne à d
                                                            roite R4 vaut 2 dan
                                                            s ce cas 
  375 000001C6         
  376 000001C6         
  377 000001C6         ;----------------------------------TOURNE A DROITE OU GA
                       UCHE  --------------------------------------------------
                       ------------------------------------
  378 000001C6         tourneADroite
  379 000001C6 F7FF FFFE       BL               MOTEUR_DROIT_ON
  380 000001CA F7FF FFFE       BL               MOTEUR_GAUCHE_ON
  381 000001CE F7FF FFFE       BL               MOTEUR_DROIT_ARRIERE
  382 000001D2 F7FF FFFE       BL               MOTEUR_GAUCHE_ARRIERE
  383 000001D6 F7FF FFFE       BL               WAITREC
  384 000001DA         
  385 000001DA F7FF FFFE       BL               MOTEUR_DROIT_ARRIERE
  386 000001DE F7FF FFFE       BL               MOTEUR_GAUCHE_AVANT
  387 000001E2 F7FF FFFE       BL               WAIT45      ; le WAIT et la vit
                                                            esse sont réglés po
                                                            ur produire un angl
                                                            e de 90° 
  388 000001E6 F7FF FFFE       BL               MOTEUR_DROIT_OFF ; déactiver le
                                                             moteur droit
  389 000001EA F7FF FFFE       BL               MOTEUR_GAUCHE_OFF ; déactiver l
                                                            e moteur gauche
  390 000001EE         
  391 000001EE F10B 0B01       ADD              R11,#1      ; incrémentation po
                                                            ur la prochaine dir
                                                            ection 
  392 000001F2 45AB            CMP              R11,R5      ; on vérifie si tou
                                                            t le programme a ét
                                                            é lu 
  393 000001F4 D019            BEQ              fin         ; c'est la fin si o
                                                            ui 
  394 000001F6 E76E            B                parcours    ; on continue le pa



ARM Macro Assembler    Page 13 


                                                            rcours si non 
  395 000001F8         tourneAGauche
  396 000001F8 F7FF FFFE       BL               MOTEUR_DROIT_ON
  397 000001FC F7FF FFFE       BL               MOTEUR_GAUCHE_ON
  398 00000200 F7FF FFFE       BL               MOTEUR_GAUCHE_ARRIERE
  399 00000204 F7FF FFFE       BL               MOTEUR_DROIT_ARRIERE
  400 00000208 F7FF FFFE       BL               WAITREC
  401 0000020C         
  402 0000020C F7FF FFFE       BL               MOTEUR_GAUCHE_ARRIERE
  403 00000210 F7FF FFFE       BL               MOTEUR_DROIT_AVANT
  404 00000214 F7FF FFFE       BL               WAIT45      ; le WAIT et la vit
                                                            esse sont réglés po
                                                            ur produire un angl
                                                            e de 90° 
  405 00000218 F7FF FFFE       BL               MOTEUR_DROIT_OFF ; déactiver le
                                                             moteur droit
  406 0000021C F7FF FFFE       BL               MOTEUR_GAUCHE_OFF ; déactiver l
                                                            e moteur gauche 
  407 00000220 F10B 0B01       ADD              R11,#1      ; incrémentation po
                                                            ur la prochaine dir
                                                            ection 
  408 00000224 45AB            CMP              R11,R5      ; on vérifie si tou
                                                            t le programme a ét
                                                            é lu 
  409 00000226 D000            BEQ              fin         ; c'est la fin si o
                                                            ui 
  410 00000228 E755            B                parcours    ; on continue le pa
                                                            rcours si non 
  411 0000022A         
  412 0000022A         fin
  413 0000022A F7FF FFFE       BL               MOTEUR_DROIT_ON
  414 0000022E F7FF FFFE       BL               MOTEUR_GAUCHE_ON
  415 00000232 F7FF FFFE       BL               MOTEUR_DROIT_AVANT
  416 00000236 F7FF FFFE       BL               MOTEUR_GAUCHE_AVANT
  417 0000023A F7FF FFFE       BL               WAIT
  418 0000023E F7FF FFFE       BL               MOTEUR_GAUCHE_OFF ; déactiver l
                                                            e moteur gauche
  419 00000242 F7FF FFFE       BL               MOTEUR_DROIT_OFF ; déactiver le
                                                             moteur droit
  420 00000246 F7FF FFFE       BL               Clignotement
  421 0000024A F7FF FFFE       BL               Clignotement
  422 0000024E         
  423 0000024E         ;------------------------------------------------------P
                       ARCOURS DU DEUXIEME LABYRINTHE  PAR TATONNEMENT --------
                       --------------------------------------------------------
                       --
  424 0000024E         
  425 0000024E F1BC 0F02       CMP              R12,#2
  426 00000252 D001            BEQ              INFINI
  427 00000254 F7FF BFFE       B                PARCOURS_LABYRINTHE2 ; on va da
                                                            ns le fichier labyt
                                                            atonnement.s 
  428 00000258         
  429 00000258         ;-------------------------------------------------------
                       --------------------------------------------------------
                       --------------------------------------------------
  430 00000258         
  431 00000258         INFINI
  432 00000258         



ARM Macro Assembler    Page 14 


  433 00000258 F7FF FFFE       BL               MOTEUR_DROIT_ON
  434 0000025C F7FF FFFE       BL               MOTEUR_GAUCHE_ON
  435 00000260         ; Faire un arc de cercle vers la gauche (virage à gauche
                       )
  436 00000260         ; Moteur droit à pleine vitesse, moteur gauche réduit
  437 00000260 F7FF FFFE       BL               MOTEUR_DROIT_AVANT
  438 00000264 F7FF FFFE       BL               MOTEUR_GAUCHE_MIN
  439 00000268 F7FF FFFE       BL               WAIT
  440 0000026C F7FF FFFE       BL               WAIT
  441 00000270 F7FF FFFE       BL               WAIT
  442 00000274 F7FF FFFE       BL               WAIT
  443 00000278         
  444 00000278         ; Effectuer un virage vers la droite pour revenir à la l
                       igne droite
  445 00000278         ; Moteur gauche à pleine vitesse, moteur droit réduit
  446 00000278         
  447 00000278         
  448 00000278 F7FF FFFE       BL               MOTEUR_DROIT_MAX
  449 0000027C F7FF FFFE       BL               MOTEUR_GAUCHE_MAX
  450 00000280 F7FF FFFE       BL               WAIT
  451 00000284         
  452 00000284         
  453 00000284         ; Répéter l'arc de cercle vers la gauche (virage à gauch
                       e)
  454 00000284 F7FF FFFE       BL               MOTEUR_GAUCHE_AVANT
  455 00000288 F7FF FFFE       BL               MOTEUR_DROIT_MIN
  456 0000028C F7FF FFFE       BL               WAIT
  457 00000290 F7FF FFFE       BL               WAIT
  458 00000294 F7FF FFFE       BL               WAIT
  459 00000298         
  460 00000298         ; Répéter le virage vers la droite
  461 00000298         
  462 00000298         
  463 00000298 F7FF FFFE       BL               MOTEUR_DROIT_MAX
  464 0000029C F7FF FFFE       BL               MOTEUR_GAUCHE_MAX
  465 000002A0 F7FF FFFE       BL               MOTEUR_DROIT_AVANT
  466 000002A4 F7FF FFFE       BL               MOTEUR_GAUCHE_AVANT
  467 000002A8         
  468 000002A8 F7FF FFFE       BL               WAIT
  469 000002AC         
  470 000002AC F7FF FFFE       BL               MOTEUR_GAUCHE_OFF ; déactiver l
                                                            e moteur gauche
  471 000002B0 F7FF FFFE       BL               MOTEUR_DROIT_OFF ; déactiver le
                                                             moteur droit
  472 000002B4         
  473 000002B4 F7FF FFFE       BL               Clignotement
  474 000002B8 F7FF FFFE       BL               Clignotement
  475 000002BC F7FF FFFE       BL               Clignotement
  476 000002C0         
  477 000002C0         ; Fin de INFINI
  478 000002C0         
  479 000002C0         END
  480 000002C0         ;-------------------------------------------------------
                       --------------------------------------------------------
                       -----------------------------------------------
  481 000002C0         
  482 000002C0         
  483 000002C0         ;--------------------------------------------------DECLA
                       RATION TABLEAU CONTENANT LE PROGRAMME ------------------



ARM Macro Assembler    Page 15 


                       --------------------------------------------------------
                       ----
  484 000002C0         
  485 000002C0 BF00            NOP
  486 000002C2         
  487 000002C2 00 00 00000000 
              400FE108 
              40025400 
              4002551C 
              40025500 
              40024510 
              4002451C 
              40007510 
              4000751C 
              400250C0 
              40007100 
              40025080 
              40007200 
              40025040 
              000FFFFF 
              40024004 
              40024008         AREA             |variable|, DATA, READWRITE
  488 00000000 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00    buffer  space            50          ;   tableau de 50 o
                                                            ctets pour contenir
                                                             les instructions 
  489 00000032                 END
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M3 --apcs=interw
ork --depend=.\objects\main.d -o.\objects\main.o -I.\RTE\_Target_1 -IC:\Users\m
aglo\AppData\Local\Arm\Packs\ARM\CMSIS\5.5.1\CMSIS\Core\Include -IC:\Users\magl
o\AppData\Local\Arm\Packs\ARM\CMSIS\5.5.1\Device\ARM\ARMCM3\Include --predefine
="__EVAL SETA 1" --predefine="__MICROLIB SETA 1" --predefine="__UVISION_VERSION
 SETA 528" --predefine="_RTE_ SETA 1" --predefine="ARMCM3 SETA 1" --list=.\list
ings\main.lst Main.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 12 in file Main.s
   Uses
      None
Comment: .text unused
Clignotement 00000142

Symbol: Clignotement
   Definitions
      At line 303 in file Main.s
   Uses
      At line 75 in file Main.s
      At line 176 in file Main.s
      At line 218 in file Main.s
      At line 356 in file Main.s
      At line 365 in file Main.s
      At line 420 in file Main.s
      At line 421 in file Main.s
      At line 473 in file Main.s
      At line 474 in file Main.s
      At line 475 in file Main.s

DEMARRAGE 000000BA

Symbol: DEMARRAGE
   Definitions
      At line 221 in file Main.s
   Uses
      At line 74 in file Main.s
      At line 226 in file Main.s

DebutProgrammation 00000070

Symbol: DebutProgrammation
   Definitions
      At line 175 in file Main.s
   Uses
      At line 268 in file Main.s
Comment: DebutProgrammation used once
END 000002C0

Symbol: END
   Definitions
      At line 479 in file Main.s
   Uses
      None
Comment: END unused
FinProgrammation 000000B0

Symbol: FinProgrammation
   Definitions
      At line 214 in file Main.s
   Uses
      At line 280 in file Main.s
      At line 291 in file Main.s




ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

INFINI 00000258

Symbol: INFINI
   Definitions
      At line 431 in file Main.s
   Uses
      At line 426 in file Main.s
Comment: INFINI used once
ReadDroit 00000092

Symbol: ReadDroit
   Definitions
      At line 194 in file Main.s
   Uses
      At line 181 in file Main.s
Comment: ReadDroit used once
ReadGauche 00000074

Symbol: ReadGauche
   Definitions
      At line 177 in file Main.s
   Uses
      At line 198 in file Main.s
      At line 255 in file Main.s

ReadState 00000062

Symbol: ReadState
   Definitions
      At line 168 in file Main.s
   Uses
      At line 172 in file Main.s
      At line 265 in file Main.s

WAIT 0000016A

Symbol: WAIT
   Definitions
      At line 328 in file Main.s
   Uses
      At line 80 in file Main.s
      At line 228 in file Main.s
      At line 417 in file Main.s
      At line 439 in file Main.s
      At line 440 in file Main.s
      At line 441 in file Main.s
      At line 442 in file Main.s
      At line 450 in file Main.s
      At line 456 in file Main.s
      At line 457 in file Main.s
      At line 458 in file Main.s
      At line 468 in file Main.s

WAIT45 00000174

Symbol: WAIT45
   Definitions
      At line 334 in file Main.s
   Uses



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

      At line 83 in file Main.s
      At line 387 in file Main.s
      At line 404 in file Main.s

WAITREC 0000017E

Symbol: WAITREC
   Definitions
      At line 340 in file Main.s
   Uses
      At line 82 in file Main.s
      At line 383 in file Main.s
      At line 400 in file Main.s

__main 00000000

Symbol: __main
   Definitions
      At line 109 in file Main.s
   Uses
      At line 73 in file Main.s
Comment: __main used once
appuisCourtDroit 000000A0

Symbol: appuisCourtDroit
   Definitions
      At line 201 in file Main.s
   Uses
      At line 288 in file Main.s
Comment: appuisCourtDroit used once
appuisCourtGauche 00000082

Symbol: appuisCourtGauche
   Definitions
      At line 184 in file Main.s
   Uses
      At line 277 in file Main.s
Comment: appuisCourtGauche used once
checkAppuisLong 000000F4

Symbol: checkAppuisLong
   Definitions
      At line 260 in file Main.s
   Uses
      At line 173 in file Main.s
Comment: checkAppuisLong used once
checkAppuisLongDroit 00000120

Symbol: checkAppuisLongDroit
   Definitions
      At line 282 in file Main.s
   Uses
      At line 199 in file Main.s
Comment: checkAppuisLongDroit used once
checkAppuisLongGauche 0000010A

Symbol: checkAppuisLongGauche
   Definitions
      At line 271 in file Main.s



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Relocatable symbols

   Uses
      At line 182 in file Main.s
Comment: checkAppuisLongGauche used once
clignoteAuClic 00000136

Symbol: clignoteAuClic
   Definitions
      At line 294 in file Main.s
   Uses
      At line 81 in file Main.s
      At line 188 in file Main.s
      At line 205 in file Main.s
      At line 227 in file Main.s

ecrireDirection 000000EA

Symbol: ecrireDirection
   Definitions
      At line 252 in file Main.s
   Uses
      At line 192 in file Main.s
      At line 209 in file Main.s

fin 0000022A

Symbol: fin
   Definitions
      At line 412 in file Main.s
   Uses
      At line 393 in file Main.s
      At line 409 in file Main.s

lectureMemoire 000001BA

Symbol: lectureMemoire
   Definitions
      At line 369 in file Main.s
   Uses
      At line 357 in file Main.s
      At line 367 in file Main.s

loop 0000014E

Symbol: loop
   Definitions
      At line 308 in file Main.s
   Uses
      At line 322 in file Main.s
Comment: loop used once
parcours 000000D6

Symbol: parcours
   Definitions
      At line 235 in file Main.s
   Uses
      At line 245 in file Main.s
      At line 362 in file Main.s
      At line 394 in file Main.s
      At line 410 in file Main.s



ARM Macro Assembler    Page 5 Alphabetic symbol ordering
Relocatable symbols


testBp1 000001A8

Symbol: testBp1
   Definitions
      At line 360 in file Main.s
   Uses
      At line 353 in file Main.s
Comment: testBp1 used once
testCollision 00000188

Symbol: testCollision
   Definitions
      At line 346 in file Main.s
   Uses
      At line 243 in file Main.s
Comment: testCollision used once
tourneADroite 000001C6

Symbol: tourneADroite
   Definitions
      At line 378 in file Main.s
   Uses
      At line 374 in file Main.s
Comment: tourneADroite used once
tourneAGauche 000001F8

Symbol: tourneAGauche
   Definitions
      At line 395 in file Main.s
   Uses
      At line 372 in file Main.s
Comment: tourneAGauche used once
wait0 000000F8

Symbol: wait0
   Definitions
      At line 261 in file Main.s
   Uses
      At line 267 in file Main.s
Comment: wait0 used once
wait01 0000010E

Symbol: wait01
   Definitions
      At line 273 in file Main.s
   Uses
      At line 279 in file Main.s
Comment: wait01 used once
wait02 00000124

Symbol: wait02
   Definitions
      At line 284 in file Main.s
   Uses
      At line 290 in file Main.s
Comment: wait02 used once
wait1 00000154




ARM Macro Assembler    Page 6 Alphabetic symbol ordering
Relocatable symbols

Symbol: wait1
   Definitions
      At line 312 in file Main.s
   Uses
      At line 313 in file Main.s
Comment: wait1 used once
wait2 0000015E

Symbol: wait2
   Definitions
      At line 318 in file Main.s
   Uses
      At line 319 in file Main.s
Comment: wait2 used once
wait21 0000013A

Symbol: wait21
   Definitions
      At line 297 in file Main.s
   Uses
      At line 298 in file Main.s
Comment: wait21 used once
wait3 0000016E

Symbol: wait3
   Definitions
      At line 329 in file Main.s
   Uses
      At line 330 in file Main.s
Comment: wait3 used once
wait45 00000178

Symbol: wait45
   Definitions
      At line 335 in file Main.s
   Uses
      At line 336 in file Main.s
Comment: wait45 used once
waitrec 00000182

Symbol: waitrec
   Definitions
      At line 341 in file Main.s
   Uses
      At line 342 in file Main.s
Comment: waitrec used once
38 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

buffer 00000000

Symbol: buffer
   Definitions
      At line 488 in file Main.s
   Uses
      At line 111 in file Main.s
Comment: buffer used once
variable 00000000

Symbol: variable
   Definitions
      At line 487 in file Main.s
   Uses
      None
Comment: variable unused
2 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

BROCHE0 00000001

Symbol: BROCHE0
   Definitions
      At line 43 in file Main.s
   Uses
      At line 78 in file Main.s
      At line 347 in file Main.s

BROCHE0_1 00000003

Symbol: BROCHE0_1
   Definitions
      At line 45 in file Main.s
   Uses
      At line 143 in file Main.s
      At line 147 in file Main.s

BROCHE1 00000002

Symbol: BROCHE1
   Definitions
      At line 44 in file Main.s
   Uses
      At line 79 in file Main.s
      At line 348 in file Main.s

BROCHE4_5 00000030

Symbol: BROCHE4_5
   Definitions
      At line 41 in file Main.s
   Uses
      At line 131 in file Main.s
      At line 135 in file Main.s
      At line 139 in file Main.s
      At line 163 in file Main.s
      At line 164 in file Main.s
      At line 216 in file Main.s
      At line 217 in file Main.s
      At line 305 in file Main.s
      At line 306 in file Main.s

BROCHE6_7 000000C0

Symbol: BROCHE6_7
   Definitions
      At line 49 in file Main.s
   Uses
      At line 151 in file Main.s
      At line 155 in file Main.s

BROCHE_4 00000010

Symbol: BROCHE_4
   Definitions
      At line 39 in file Main.s
   Uses
      At line 203 in file Main.s



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols

      At line 204 in file Main.s

BROCHE_5 00000020

Symbol: BROCHE_5
   Definitions
      At line 40 in file Main.s
   Uses
      At line 186 in file Main.s
      At line 187 in file Main.s

BROCHE_6 00000040

Symbol: BROCHE_6
   Definitions
      At line 47 in file Main.s
   Uses
      At line 169 in file Main.s
      At line 178 in file Main.s
      At line 223 in file Main.s
      At line 262 in file Main.s
      At line 274 in file Main.s

BROCHE_7 00000080

Symbol: BROCHE_7
   Definitions
      At line 48 in file Main.s
   Uses
      At line 195 in file Main.s
      At line 285 in file Main.s

DUREE 00060000

Symbol: DUREE
   Definitions
      At line 51 in file Main.s
   Uses
      At line 310 in file Main.s
      At line 316 in file Main.s

GPIO_I_PUR 00000510

Symbol: GPIO_I_PUR
   Definitions
      At line 35 in file Main.s
   Uses
      At line 142 in file Main.s
      At line 150 in file Main.s

GPIO_O_DEN 0000051C

Symbol: GPIO_O_DEN
   Definitions
      At line 32 in file Main.s
   Uses
      At line 134 in file Main.s
      At line 146 in file Main.s
      At line 154 in file Main.s



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Absolute symbols


GPIO_O_DIR 00000400

Symbol: GPIO_O_DIR
   Definitions
      At line 24 in file Main.s
   Uses
      At line 130 in file Main.s
Comment: GPIO_O_DIR used once
GPIO_O_DR2R 00000500

Symbol: GPIO_O_DR2R
   Definitions
      At line 28 in file Main.s
   Uses
      At line 138 in file Main.s
Comment: GPIO_O_DR2R used once
GPIO_PORTD_BASE 40007000

Symbol: GPIO_PORTD_BASE
   Definitions
      At line 21 in file Main.s
   Uses
      At line 76 in file Main.s
      At line 150 in file Main.s
      At line 154 in file Main.s
      At line 169 in file Main.s
      At line 178 in file Main.s
      At line 195 in file Main.s
      At line 223 in file Main.s
      At line 262 in file Main.s
      At line 274 in file Main.s
      At line 285 in file Main.s

GPIO_PORTE_BASE 40024000

Symbol: GPIO_PORTE_BASE
   Definitions
      At line 19 in file Main.s
   Uses
      At line 77 in file Main.s
      At line 142 in file Main.s
      At line 146 in file Main.s
      At line 347 in file Main.s
      At line 348 in file Main.s

GPIO_PORTF_BASE 40025000

Symbol: GPIO_PORTF_BASE
   Definitions
      At line 17 in file Main.s
   Uses
      At line 130 in file Main.s
      At line 134 in file Main.s
      At line 138 in file Main.s
      At line 164 in file Main.s
      At line 187 in file Main.s
      At line 204 in file Main.s
      At line 217 in file Main.s



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Absolute symbols

      At line 306 in file Main.s

SYSCTL_PERIPH_GPIO 400FE108

Symbol: SYSCTL_PERIPH_GPIO
   Definitions
      At line 15 in file Main.s
   Uses
      At line 118 in file Main.s
Comment: SYSCTL_PERIPH_GPIO used once
18 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

MOTEUR_DROIT_ARRIERE 00000000

Symbol: MOTEUR_DROIT_ARRIERE
   Definitions
      At line 90 in file Main.s
   Uses
      At line 381 in file Main.s
      At line 385 in file Main.s
      At line 399 in file Main.s

MOTEUR_DROIT_AVANT 00000000

Symbol: MOTEUR_DROIT_AVANT
   Definitions
      At line 89 in file Main.s
   Uses
      At line 240 in file Main.s
      At line 403 in file Main.s
      At line 415 in file Main.s
      At line 437 in file Main.s
      At line 465 in file Main.s

MOTEUR_DROIT_INVERSE 00000000

Symbol: MOTEUR_DROIT_INVERSE
   Definitions
      At line 91 in file Main.s
   Uses
      None
Comment: MOTEUR_DROIT_INVERSE unused
MOTEUR_DROIT_MAX 00000000

Symbol: MOTEUR_DROIT_MAX
   Definitions
      At line 104 in file Main.s
   Uses
      At line 448 in file Main.s
      At line 463 in file Main.s

MOTEUR_DROIT_MIN 00000000

Symbol: MOTEUR_DROIT_MIN
   Definitions
      At line 101 in file Main.s
   Uses
      At line 455 in file Main.s
Comment: MOTEUR_DROIT_MIN used once
MOTEUR_DROIT_OFF 00000000

Symbol: MOTEUR_DROIT_OFF
   Definitions
      At line 88 in file Main.s
   Uses
      At line 355 in file Main.s
      At line 364 in file Main.s
      At line 388 in file Main.s
      At line 405 in file Main.s
      At line 419 in file Main.s
      At line 471 in file Main.s



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
External symbols


MOTEUR_DROIT_ON 00000000

Symbol: MOTEUR_DROIT_ON
   Definitions
      At line 87 in file Main.s
   Uses
      At line 237 in file Main.s
      At line 379 in file Main.s
      At line 396 in file Main.s
      At line 413 in file Main.s
      At line 433 in file Main.s

MOTEUR_GAUCHE_ARRIERE 00000000

Symbol: MOTEUR_GAUCHE_ARRIERE
   Definitions
      At line 96 in file Main.s
   Uses
      At line 382 in file Main.s
      At line 398 in file Main.s
      At line 402 in file Main.s

MOTEUR_GAUCHE_AVANT 00000000

Symbol: MOTEUR_GAUCHE_AVANT
   Definitions
      At line 95 in file Main.s
   Uses
      At line 241 in file Main.s
      At line 386 in file Main.s
      At line 416 in file Main.s
      At line 454 in file Main.s
      At line 466 in file Main.s

MOTEUR_GAUCHE_INVERSE 00000000

Symbol: MOTEUR_GAUCHE_INVERSE
   Definitions
      At line 97 in file Main.s
   Uses
      None
Comment: MOTEUR_GAUCHE_INVERSE unused
MOTEUR_GAUCHE_MAX 00000000

Symbol: MOTEUR_GAUCHE_MAX
   Definitions
      At line 105 in file Main.s
   Uses
      At line 449 in file Main.s
      At line 464 in file Main.s

MOTEUR_GAUCHE_MIN 00000000

Symbol: MOTEUR_GAUCHE_MIN
   Definitions
      At line 102 in file Main.s
   Uses
      At line 438 in file Main.s



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
External symbols

Comment: MOTEUR_GAUCHE_MIN used once
MOTEUR_GAUCHE_OFF 00000000

Symbol: MOTEUR_GAUCHE_OFF
   Definitions
      At line 94 in file Main.s
   Uses
      At line 354 in file Main.s
      At line 363 in file Main.s
      At line 389 in file Main.s
      At line 406 in file Main.s
      At line 418 in file Main.s
      At line 470 in file Main.s

MOTEUR_GAUCHE_ON 00000000

Symbol: MOTEUR_GAUCHE_ON
   Definitions
      At line 93 in file Main.s
   Uses
      At line 238 in file Main.s
      At line 380 in file Main.s
      At line 397 in file Main.s
      At line 414 in file Main.s
      At line 434 in file Main.s

MOTEUR_INIT 00000000

Symbol: MOTEUR_INIT
   Definitions
      At line 85 in file Main.s
   Uses
      At line 160 in file Main.s
Comment: MOTEUR_INIT used once
PARCOURS_LABYRINTHE2 00000000

Symbol: PARCOURS_LABYRINTHE2
   Definitions
      At line 99 in file Main.s
   Uses
      At line 427 in file Main.s
Comment: PARCOURS_LABYRINTHE2 used once
WAIT_MIN 00000000

Symbol: WAIT_MIN
   Definitions
      At line 103 in file Main.s
   Uses
      None
Comment: WAIT_MIN unused
17 symbols
412 symbols in table
