


ARM Macro Assembler    Page 1 


    1 00000000         ;; RK - Evalbot (Cortex M3 de Texas Instrument)
    2 00000000         ; programme - Pilotage 2 Moteurs Evalbot par PWM tout en
                        ASM (Evalbot tourne sur lui même)
    3 00000000         
    4 00000000         
    5 00000000         
    6 00000000                 AREA             |.text|, CODE, READONLY
    7 00000000         
    8 00000000         ; This register controls the clock gating logic in norma
                       l Run mode
    9 00000000 400FE108 
                       SYSCTL_PERIPH_GPIO
                               EQU              0x400FE108  ; SYSCTL_RCGC2_R (p
                                                            291 datasheet de lm
                                                            3s9b92.pdf)
   10 00000000         
   11 00000000         
   12 00000000 40025000 
                       GPIO_PORTF_BASE
                               EQU              0x40025000  ; GPIO Port F (APB)
                                                             base: 0x4002.5000 
                                                            
   13 00000000         
   14 00000000 40024000 
                       GPIO_PORTE_BASE
                               EQU              0x40024000  ; GPIO Port E (APB)
                                                             base: 0x4002.4000
   15 00000000         
   16 00000000 40007000 
                       GPIO_PORTD_BASE
                               EQU              0x40007000  ; GPIO Port D (APB)
                                                             base: 0x4000.7000
   17 00000000         
   18 00000000         ; configure the corresponding pin to be an output
   19 00000000 00000400 
                       GPIO_O_DIR
                               EQU              0x00000400  ; GPIO Direction (p
                                                            417 datasheet de lm
                                                            3s9B92.pdf)
   20 00000000         
   21 00000000         ; The GPIODR2R register is the 2-mA drive control regist
                       er
   22 00000000         ; By default, all GPIO pins have 2-mA drive.
   23 00000000 00000500 
                       GPIO_O_DR2R
                               EQU              0x00000500  ; GPIO 2-mA Drive S
                                                            elect (p428 datashe
                                                            et de lm3s9B92.pdf)
                                                            
   24 00000000         
   25 00000000         ; Digital enable register
   26 00000000         ; To use the pin as a digital input or output, the corre
                       sponding GPIODEN bit must be set.
   27 00000000 0000051C 
                       GPIO_O_DEN
                               EQU              0x0000051C  ; GPIO Digital Enab
                                                            le (p437 datasheet 
                                                            de lm3s9B92.pdf)
   28 00000000         



ARM Macro Assembler    Page 2 


   29 00000000         ; Pul_up
   30 00000000 00000510 
                       GPIO_I_PUR
                               EQU              0x00000510  ; GPIO Pull-Up (p43
                                                            2 datasheet de lm3s
                                                            9B92.pdf)
   31 00000000         
   32 00000000         ; LED
   33 00000000 00000010 
                       BROCHE_4
                               EQU              0x10        ; led1
   34 00000000 00000020 
                       BROCHE_5
                               EQU              0x20        ; led2 
   35 00000000 00000030 
                       BROCHE4_5
                               EQU              0x30        ; led1 & led2 sur b
                                                            roche 4 et 5 0b0011
                                                            0000
   36 00000000         ; BUMPER
   37 00000000 00000001 
                       BROCHE0 EQU              0x1         ; bumper_R
   38 00000000 00000002 
                       BROCHE1 EQU              0x2         ; bumper_L
   39 00000000 00000003 
                       BROCHE0_1
                               EQU              0x3         ; bumperR_L
   40 00000000         ; SWITCH
   41 00000000 00000040 
                       BROCHE_6
                               EQU              0x40        ; switch1
   42 00000000 00000080 
                       BROCHE_7
                               EQU              0x80        ; switch2 
   43 00000000 000000C0 
                       BROCHE6_7
                               EQU              0xC0        ; sw1 et sw2
   44 00000000         ; blinking frequency
   45 00000000 00080000 
                       DUREE   EQU              0x80000
   46 00000000         
   47 00000000         ;; registres utilisés 
   48 00000000         ;;-----------------------
   49 00000000         ;;   R0  R1 R2  R3  R4  R5  R6 R7 R8 R10
   50 00000000         ;;-------------------------
   51 00000000                 ENTRY
   52 00000000                 EXPORT           __main
   53 00000000         ;; The IMPORT command specifies that a symbol is defined
                        in a shared object at runtime.
   54 00000000                 IMPORT           MOTEUR_INIT ; initialise les mo
                                                            teurs (configure le
                                                            s pwms + GPIO)
   55 00000000         
   56 00000000                 IMPORT           MOTEUR_DROIT_ON ; activer le mo
                                                            teur droit
   57 00000000                 IMPORT           MOTEUR_DROIT_OFF ; déactiver le
                                                             moteur droit
   58 00000000                 IMPORT           MOTEUR_DROIT_AVANT ; moteur dro
                                                            it tourne vers l'av



ARM Macro Assembler    Page 3 


                                                            ant
   59 00000000                 IMPORT           MOTEUR_DROIT_ARRIERE ; moteur d
                                                            roit tourne vers l'
                                                            arrière
   60 00000000                 IMPORT           MOTEUR_DROIT_INVERSE ; inverse 
                                                            le sens de rotation
                                                             du moteur droit
   61 00000000         
   62 00000000                 IMPORT           MOTEUR_GAUCHE_ON ; activer le m
                                                            oteur gauche
   63 00000000                 IMPORT           MOTEUR_GAUCHE_OFF ; déactiver l
                                                            e moteur gauche
   64 00000000                 IMPORT           MOTEUR_GAUCHE_AVANT ; moteur ga
                                                            uche tourne vers l'
                                                            avant
   65 00000000                 IMPORT           MOTEUR_GAUCHE_ARRIERE ; moteur 
                                                            gauche tourne vers 
                                                            l'arrière
   66 00000000                 IMPORT           MOTEUR_GAUCHE_INVERSE ; inverse
                                                             le sens de rotatio
                                                            n du moteur gauche
   67 00000000         __main
   68 00000000         
   69 00000000 F8DF 9144       LDR              R9, =buffer ; Charger l'adresse
                                                             de buffer dans R0
   70 00000004 F04F 0200       mov              r2, #0x000  ;; pour eteindre LE
                                                            D
   71 00000008 F04F 0500       mov              R5, #0      ; compteur de d'ind
                                                            ice dans la tableau
                                                             
   72 0000000C         
   73 0000000C         
   74 0000000C 4E4F            ldr              r6, = SYSCTL_PERIPH_GPIO 
                                                            ;; RCGC2
   75 0000000E F04F 0038       mov              r0, #0x00000038 ;; Enable clock
                                                             sur GPIO E , F  et
                                                             D où sont branchés
                                                             les leds (0x28 == 
                                                            0b111000)
   76 00000012 6030            str              r0, [r6]
   77 00000014         ;; "There must be a delay of 3 system clocks before any 
                       GPIO reg. access  (p413 datasheet de lm3s9B92.pdf)
   78 00000014 BF00            nop                          ;; tres tres import
                                                            ant....
   79 00000016 BF00            nop
   80 00000018 BF00            nop                          ;; pas necessaire e
                                                            n simu ou en debbug
                                                             step by step...
   81 0000001A         
   82 0000001A         
   83 0000001A         
   84 0000001A         ;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^CONFIGURATION LED
   85 0000001A         
   86 0000001A 4E4D            ldr              r6, = GPIO_PORTF_BASE+GPIO_O_DI
R 
                                                            ;; 1 Pin du portF e
                                                            n sortie (broche 4 
                                                            : 00010000)
   87 0000001C F04F 0030       ldr              r0, = BROCHE4_5



ARM Macro Assembler    Page 4 


   88 00000020 6030            str              r0, [r6]
   89 00000022         
   90 00000022 4E4C            ldr              r6, = GPIO_PORTF_BASE+GPIO_O_DE
N 
                                                            ;; Enable Digital F
                                                            unction 
   91 00000024 F04F 0030       ldr              r0, = BROCHE4_5
   92 00000028 6030            str              r0, [r6]
   93 0000002A         
   94 0000002A 4E4B            ldr              r6, = GPIO_PORTF_BASE+GPIO_O_DR
2R 
                                                            ;; Choix de l'inten
                                                            sité de sortie (2mA
                                                            )
   95 0000002C F04F 0030       ldr              r0, = BROCHE4_5
   96 00000030 6030            str              r0, [r6]
   97 00000032         ;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^CONFIGURATION Bumper0_1
   98 00000032 4E4A            ldr              r6, = GPIO_PORTE_BASE+GPIO_I_PU
R 
                                                            ;; Pul_up 
   99 00000034 F04F 0003       ldr              r0, = BROCHE0_1
  100 00000038 6030            str              r0, [r6]
  101 0000003A         
  102 0000003A 4E49            ldr              r6, = GPIO_PORTE_BASE+GPIO_O_DE
N 
                                                            ;; Enable Digital F
                                                            unction 
  103 0000003C F04F 0003       ldr              r0, = BROCHE0_1
  104 00000040 6030            str              r0, [r6]
  105 00000042         ;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^CONFIGURATION Switch6_7
  106 00000042 4E48            ldr              r6, = GPIO_PORTD_BASE+GPIO_I_PU
R 
                                                            ;; Pul_up 
  107 00000044 F04F 00C0       ldr              r0, = BROCHE6_7
  108 00000048 6030            str              r0, [r6]
  109 0000004A         
  110 0000004A 4E47            ldr              r6, = GPIO_PORTD_BASE+GPIO_O_DE
N 
                                                            ;; Enable Digital F
                                                            unction 
  111 0000004C F04F 00C0       ldr              r0, = BROCHE6_7
  112 00000050 6030            str              r0, [r6]
  113 00000052         
  114 00000052         
  115 00000052         ;vvvvvvvvvvvvvvvvvvvvvvvFin configuration 
  116 00000052         ;  ldr r4, = GPIO_PORTF_BASE + (BROCHE_4<<2)  ;; pour al
                       lumer la led4
  117 00000052         ;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^CONFIGURATION LED2 
  118 00000052         ;  ldr r5, = GPIO_PORTF_BASE + (BROCHE_5<<2)  ;;   
  119 00000052         ;  ldr r7, = GPIO_PORTE_BASE + (BROCHE0<<2)  ;; @data Re
                       gister = @base + (mask<<2) ==> Switcher  
  120 00000052         ;  ldr r8, = GPIO_PORTE_BASE + (BROCHE1<<2)  ;; @data Re
                       gister = @base + (mask<<2) ==> Switcher
  121 00000052         
  122 00000052         ; Configure les PWM + GPIO
  123 00000052 F7FF FFFE       BL               MOTEUR_INIT
  124 00000056         
  125 00000056         
  126 00000056         ; pour allumer les deux leds



ARM Macro Assembler    Page 5 


  127 00000056 F04F 0330       mov              r3, #BROCHE4_5
  128 0000005A 4E44            ldr              r6, = GPIO_PORTF_BASE + (BROCHE
4_5<<2)
  129 0000005C         
  130 0000005C         ;mov r4, #BROCHE_6  
  131 0000005C 4F44            ldr              r7, = GPIO_PORTD_BASE + (BROCHE
_6<<2)
  132 0000005E         ;mov r4, #BROCHE_7  
  133 0000005E F8DF 8114       ldr              r8, = GPIO_PORTD_BASE + (BROCHE
_7<<2)
  134 00000062         
  135 00000062         ; allumage des deux leds 
  136 00000062 6033            str              r3, [r6]
  137 00000064         
  138 00000064         ;loop 
  139 00000064         
  140 00000064         ReadState
  141 00000064 F8D7 A000       ldr              r10,[r7]
  142 00000068 F1BA 0F00       CMP              r10,#0x00
  143 0000006C D1FA            BNE              ReadState
  144 0000006E E030            B                checkAppuisLong
  145 00000070         Debut
  146 00000070 F000 F853       BL               Clignotement
  147 00000074         
  148 00000074         ; eteindre les deux leds 
  149 00000074         ;str r2, [r6]
  150 00000074         
  151 00000074         debutLectureProgramme
  152 00000074         ReadGauche
  153 00000074 F8D7 A000       ldr              r10,[r7]
  154 00000078 F1BA 0F00       CMP              r10,#0x00
  155 0000007C D108            BNE              ReadDroit   ; on test le switch
                                                             gauche si le droit
                                                             n'est pas appuyé 
  156 0000007E E032            B                checkAppuisLongGauche ; on véri
                                                            fie si l'appuis est
                                                             long
  157 00000080         appuisCourtGauche
  158 00000080         ; on allume au  clic
  159 00000080 F04F 0310       mov              r3, #BROCHE_4
  160 00000084 4E3C            ldr              r6, = GPIO_PORTF_BASE + (BROCHE
_4<<2)
  161 00000086 F000 F842       BL               clignoteAuClic
  162 0000008A         
  163 0000008A         
  164 0000008A F04F 0A01       mov              r10,#1      ; 1 pour  gauche 
  165 0000008E E01B            B                ecrireDirection
  166 00000090         
  167 00000090         ReadDroit
  168 00000090 F8D8 A000       ldr              r10,[r8]
  169 00000094 F1BA 0F00       CMP              r10,#0x00
  170 00000098 D1EC            BNE              ReadGauche
  171 0000009A E02E            B                checkAppuisLongDroit
  172 0000009C         appuisCourtDroit
  173 0000009C F04F 0320       mov              r3, #BROCHE_5
  174 000000A0 4E36            ldr              r6, = GPIO_PORTF_BASE + (BROCHE
_5<<2)
  175 000000A2 F000 F834       BL               clignoteAuClic
  176 000000A6 F04F 0A02       mov              r10,#2      ; 2 pour  droite 



ARM Macro Assembler    Page 6 


  177 000000AA E00D            B                ecrireDirection
  178 000000AC         
  179 000000AC         FinProgrammation
  180 000000AC F04F 0330       mov              r3, #BROCHE4_5
  181 000000B0 4E2E            ldr              r6, = GPIO_PORTF_BASE + (BROCHE
4_5<<2)
  182 000000B2 F000 F832       BL               Clignotement
  183 000000B6         debut
  184 000000B6         ; Activer les deux moteurs droit et gauche
  185 000000B6 F7FF FFFE       BL               MOTEUR_DROIT_ON
  186 000000BA F7FF FFFE       BL               MOTEUR_GAUCHE_ON
  187 000000BE         ; Evalbot avance droit devant
  188 000000BE F7FF FFFE       BL               MOTEUR_DROIT_AVANT
  189 000000C2 F7FF FFFE       BL               MOTEUR_GAUCHE_AVANT
  190 000000C6         
  191 000000C6         ;BL WAIT ; BL (Branchement vers le lien WAIT); possibili
                       té de retour à la suite avec (BX LR)
  192 000000C6         ;BL WAIT
  193 000000C6         ;Rotation à droite de l'Evalbot pendant une demi-période
                        (1 seul WAIT)
  194 000000C6         ;BL MOTEUR_DROIT_ARRIERE   ; MOTEUR_DROIT_INVERSE
  195 000000C6         ;BL WAIT
  196 000000C6         ;BL WAIT
  197 000000C6         
  198 000000C6         
  199 000000C6         ; eteindre les deux leds 
  200 000000C6         ;ldr r6, = GPIO_PORTF_BASE + (BROCHE4_5<<2)
  201 000000C6         
  202 000000C6         ;str r2, [r6]
  203 000000C6         
  204 000000C6         
  205 000000C6         ; Avancement pendant une période (deux WAIT)
  206 000000C6         ;BL WAIT ; BL (Branchement vers le lien WAIT); possibili
                       té de retour à la suite avec (BX LR)
  207 000000C6         ;BL WAIT
  208 000000C6         ;Rotation à droite de l'Evalbot pendant une demi-période
                        (1 seul WAIT)
  209 000000C6         ;BL MOTEUR_DROIT_ARRIERE   ; MOTEUR_DROIT_INVERSE
  210 000000C6         ;BL WAIT
  211 000000C6         ;ldr r10,[r8]
  212 000000C6         
  213 000000C6 E7F6            b                debut
  214 000000C8         
  215 000000C8         
  216 000000C8         
  217 000000C8         ecrireDirection
  218 000000C8 F809 A005       STRB             R10, [R9, R5]
  219 000000CC F105 0501       ADD              R5,#1       ; incrémentation du
                                                             compteur 
  220 000000D0 E7D0            B                ReadGauche
  221 000000D2         
  222 000000D2         
  223 000000D2 F44F 217F 
                       checkAppuisLong
                               ldr              r1, =0xFF000 ; correspond à la 
                                                            duree de l'appuis l
                                                            ong 
  224 000000D6         wait0
  225 000000D6 F8D7 A000       ldr              r10,[r7]



ARM Macro Assembler    Page 7 


  226 000000DA F1BA 0F00       CMP              r10,#0x00
  227 000000DE D1C1            BNE              ReadState   ; si l'utilisateur 
                                                            relâche pendant le 
                                                            wait  ei r10=0x01 ,
                                                             on recommence 
  228 000000E0 3901            subs             r1, #1
  229 000000E2 D1F8            bne              wait0
  230 000000E4 E7C4            B                Debut
  231 000000E6         
  232 000000E6         
  233 000000E6         checkAppuisLongGauche
  234 000000E6 F44F 217F       ldr              r1, =0xFF000 ; correspond à la 
                                                            duree de l'appuis l
                                                            ong 
  235 000000EA         wait01
  236 000000EA F8D7 A000       ldr              r10,[r7]
  237 000000EE F1BA 0F00       CMP              r10,#0x00
  238 000000F2 D1C5            BNE              appuisCourtGauche ; si l'utilis
                                                            ateur relâche penda
                                                            nt le wait  ei r10=
                                                            0x01 , c'est un app
                                                            uis court sur gauch
                                                            e 
  239 000000F4 3901            subs             r1, #1
  240 000000F6 D1F8            bne              wait01
  241 000000F8 E7D8            B                FinProgrammation
  242 000000FA         
  243 000000FA         checkAppuisLongDroit
  244 000000FA F44F 217F       ldr              r1, =0xFF000 ; correspond à la 
                                                            duree de l'appuis l
                                                            ong 
  245 000000FE         wait02
  246 000000FE F8D8 A000       ldr              r10,[r8]
  247 00000102 F1BA 0F00       CMP              r10,#0x00
  248 00000106 D1C9            BNE              appuisCourtDroit ; si l'utilisa
                                                            teur relâche pendan
                                                            t le wait  ei r10=0
                                                            x01 , c'est un appu
                                                            is court sur droit
  249 00000108 3901            subs             r1, #1
  250 0000010A D1F8            bne              wait02
  251 0000010C E7CE            B                FinProgrammation
  252 0000010E         
  253 0000010E         clignoteAuClic
  254 0000010E 491C            ldr              r1, =0xFFFFF ; durée d'allumage
                                                            
  255 00000110 6033            str              r3, [r6]
  256 00000112 3901    wait21  subs             r1, #1
  257 00000114 D1FD            bne              wait21
  258 00000116 6032            str              r2, [r6]    ;; Eteint LED car r
                                                            2 = 0x00      
  259 00000118 4770            BX               LR
  260 0000011A         
  261 0000011A         
  262 0000011A         Clignotement
  263 0000011A F04F 0408       ldr              r4, =0x8    ; durée de clignote
                                                            ment
  264 0000011E         
  265 0000011E 6033            str              r3, [r6]    ;; Allume LED1&2 po



ARM Macro Assembler    Page 8 


                                                            rtF broche 4&5 : 00
                                                            110000 (contenu de 
                                                            r3)
  266 00000120         loop
  267 00000120 6032            str              r2, [r6]    ;; Eteint LED car r
                                                            2 = 0x00      
  268 00000122 F44F 2100       ldr              r1, = DUREE ;; pour la duree de
                                                             la boucle d'attent
                                                            e1 (wait1)
  269 00000126         
  270 00000126 3901    wait1   subs             r1, #1
  271 00000128 D1FD            bne              wait1
  272 0000012A         
  273 0000012A 6033            str              r3, [r6]    ;; Allume LED1&2 po
                                                            rtF broche 4&5 : 00
                                                            110000 (contenu de 
                                                            r3)
  274 0000012C F44F 2100       ldr              r1, = DUREE ;; pour la duree de
                                                             la boucle d'attent
                                                            e2 (wait2)
  275 00000130         
  276 00000130 3901    wait2   subs             r1, #1
  277 00000132 D1FD            bne              wait2
  278 00000134         
  279 00000134 3C01            subs             r4, #1      ; contrôle le temp 
                                                            de clignotement 
  280 00000136 D1F3            bne              loop
  281 00000138         
  282 00000138 6032            str              r2, [r6]    ;; Eteint LED car r
                                                            2 = 0x00      
  283 0000013A 4770            BX               LR
  284 0000013C         
  285 0000013C         ;; Boucle d'attante
  286 0000013C F44F 21A4 
                       WAIT    ldr              r1, =0x052000
  287 00000140 3901    wait3   subs             r1, #1
  288 00000142 D1FD            bne              wait3
  289 00000144 4770            BX               LR
  290 00000146         
  291 00000146         
  292 00000146 BF00            NOP
  293 00000148         
  294 00000148 00000000 
              400FE108 
              40025400 
              4002551C 
              40025500 
              40024510 
              4002451C 
              40007510 
              4000751C 
              400250C0 
              40007100 
              40007200 
              40025040 
              40025080 
              000FFFFF         AREA             |variable|, DATA, READWRITE
  295 00000000 00 00 00 
              00 00 00 



ARM Macro Assembler    Page 9 


              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00    buffer  space            50          ;   tableau de 50 o
                                                            ctets pour contenir
                                                             les instructions 
  296 00000032                 END
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M3 --apcs=interw
ork --depend=.\objects\rk_priseenmain_moteurs.d -o.\objects\rk_priseenmain_mote
urs.o -I.\RTE\_Target_1 -IC:\Users\maglo\AppData\Local\Arm\Packs\ARM\CMSIS\5.5.
1\CMSIS\Core\Include -IC:\Users\maglo\AppData\Local\Arm\Packs\ARM\CMSIS\5.5.1\D
evice\ARM\ARMCM3\Include --predefine="__EVAL SETA 1" --predefine="__MICROLIB SE
TA 1" --predefine="__UVISION_VERSION SETA 528" --predefine="_RTE_ SETA 1" --pre
define="ARMCM3 SETA 1" --list=.\listings\rk_priseenmain_moteurs.lst RK_PriseEnM
ain_Moteurs.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 6 in file RK_PriseEnMain_Moteurs.s
   Uses
      None
Comment: .text unused
Clignotement 0000011A

Symbol: Clignotement
   Definitions
      At line 262 in file RK_PriseEnMain_Moteurs.s
   Uses
      At line 146 in file RK_PriseEnMain_Moteurs.s
      At line 182 in file RK_PriseEnMain_Moteurs.s

Debut 00000070

Symbol: Debut
   Definitions
      At line 145 in file RK_PriseEnMain_Moteurs.s
   Uses
      At line 230 in file RK_PriseEnMain_Moteurs.s
Comment: Debut used once
FinProgrammation 000000AC

Symbol: FinProgrammation
   Definitions
      At line 179 in file RK_PriseEnMain_Moteurs.s
   Uses
      At line 241 in file RK_PriseEnMain_Moteurs.s
      At line 251 in file RK_PriseEnMain_Moteurs.s

ReadDroit 00000090

Symbol: ReadDroit
   Definitions
      At line 167 in file RK_PriseEnMain_Moteurs.s
   Uses
      At line 155 in file RK_PriseEnMain_Moteurs.s
Comment: ReadDroit used once
ReadGauche 00000074

Symbol: ReadGauche
   Definitions
      At line 152 in file RK_PriseEnMain_Moteurs.s
   Uses
      At line 170 in file RK_PriseEnMain_Moteurs.s
      At line 220 in file RK_PriseEnMain_Moteurs.s

ReadState 00000064

Symbol: ReadState
   Definitions
      At line 140 in file RK_PriseEnMain_Moteurs.s
   Uses
      At line 143 in file RK_PriseEnMain_Moteurs.s
      At line 227 in file RK_PriseEnMain_Moteurs.s



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols


WAIT 0000013C

Symbol: WAIT
   Definitions
      At line 286 in file RK_PriseEnMain_Moteurs.s
   Uses
      None
Comment: WAIT unused
__main 00000000

Symbol: __main
   Definitions
      At line 67 in file RK_PriseEnMain_Moteurs.s
   Uses
      At line 52 in file RK_PriseEnMain_Moteurs.s
Comment: __main used once
appuisCourtDroit 0000009C

Symbol: appuisCourtDroit
   Definitions
      At line 172 in file RK_PriseEnMain_Moteurs.s
   Uses
      At line 248 in file RK_PriseEnMain_Moteurs.s
Comment: appuisCourtDroit used once
appuisCourtGauche 00000080

Symbol: appuisCourtGauche
   Definitions
      At line 157 in file RK_PriseEnMain_Moteurs.s
   Uses
      At line 238 in file RK_PriseEnMain_Moteurs.s
Comment: appuisCourtGauche used once
checkAppuisLong 000000D2

Symbol: checkAppuisLong
   Definitions
      At line 223 in file RK_PriseEnMain_Moteurs.s
   Uses
      At line 144 in file RK_PriseEnMain_Moteurs.s
Comment: checkAppuisLong used once
checkAppuisLongDroit 000000FA

Symbol: checkAppuisLongDroit
   Definitions
      At line 243 in file RK_PriseEnMain_Moteurs.s
   Uses
      At line 171 in file RK_PriseEnMain_Moteurs.s
Comment: checkAppuisLongDroit used once
checkAppuisLongGauche 000000E6

Symbol: checkAppuisLongGauche
   Definitions
      At line 233 in file RK_PriseEnMain_Moteurs.s
   Uses
      At line 156 in file RK_PriseEnMain_Moteurs.s
Comment: checkAppuisLongGauche used once
clignoteAuClic 0000010E




ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

Symbol: clignoteAuClic
   Definitions
      At line 253 in file RK_PriseEnMain_Moteurs.s
   Uses
      At line 161 in file RK_PriseEnMain_Moteurs.s
      At line 175 in file RK_PriseEnMain_Moteurs.s

debut 000000B6

Symbol: debut
   Definitions
      At line 183 in file RK_PriseEnMain_Moteurs.s
   Uses
      At line 213 in file RK_PriseEnMain_Moteurs.s
Comment: debut used once
debutLectureProgramme 00000074

Symbol: debutLectureProgramme
   Definitions
      At line 151 in file RK_PriseEnMain_Moteurs.s
   Uses
      None
Comment: debutLectureProgramme unused
ecrireDirection 000000C8

Symbol: ecrireDirection
   Definitions
      At line 217 in file RK_PriseEnMain_Moteurs.s
   Uses
      At line 165 in file RK_PriseEnMain_Moteurs.s
      At line 177 in file RK_PriseEnMain_Moteurs.s

loop 00000120

Symbol: loop
   Definitions
      At line 266 in file RK_PriseEnMain_Moteurs.s
   Uses
      At line 280 in file RK_PriseEnMain_Moteurs.s
Comment: loop used once
wait0 000000D6

Symbol: wait0
   Definitions
      At line 224 in file RK_PriseEnMain_Moteurs.s
   Uses
      At line 229 in file RK_PriseEnMain_Moteurs.s
Comment: wait0 used once
wait01 000000EA

Symbol: wait01
   Definitions
      At line 235 in file RK_PriseEnMain_Moteurs.s
   Uses
      At line 240 in file RK_PriseEnMain_Moteurs.s
Comment: wait01 used once
wait02 000000FE

Symbol: wait02



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 245 in file RK_PriseEnMain_Moteurs.s
   Uses
      At line 250 in file RK_PriseEnMain_Moteurs.s
Comment: wait02 used once
wait1 00000126

Symbol: wait1
   Definitions
      At line 270 in file RK_PriseEnMain_Moteurs.s
   Uses
      At line 271 in file RK_PriseEnMain_Moteurs.s
Comment: wait1 used once
wait2 00000130

Symbol: wait2
   Definitions
      At line 276 in file RK_PriseEnMain_Moteurs.s
   Uses
      At line 277 in file RK_PriseEnMain_Moteurs.s
Comment: wait2 used once
wait21 00000112

Symbol: wait21
   Definitions
      At line 256 in file RK_PriseEnMain_Moteurs.s
   Uses
      At line 257 in file RK_PriseEnMain_Moteurs.s
Comment: wait21 used once
wait3 00000140

Symbol: wait3
   Definitions
      At line 287 in file RK_PriseEnMain_Moteurs.s
   Uses
      At line 288 in file RK_PriseEnMain_Moteurs.s
Comment: wait3 used once
26 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

buffer 00000000

Symbol: buffer
   Definitions
      At line 295 in file RK_PriseEnMain_Moteurs.s
   Uses
      At line 69 in file RK_PriseEnMain_Moteurs.s
Comment: buffer used once
variable 00000000

Symbol: variable
   Definitions
      At line 294 in file RK_PriseEnMain_Moteurs.s
   Uses
      None
Comment: variable unused
2 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

BROCHE0 00000001

Symbol: BROCHE0
   Definitions
      At line 37 in file RK_PriseEnMain_Moteurs.s
   Uses
      None
Comment: BROCHE0 unused
BROCHE0_1 00000003

Symbol: BROCHE0_1
   Definitions
      At line 39 in file RK_PriseEnMain_Moteurs.s
   Uses
      At line 99 in file RK_PriseEnMain_Moteurs.s
      At line 103 in file RK_PriseEnMain_Moteurs.s

BROCHE1 00000002

Symbol: BROCHE1
   Definitions
      At line 38 in file RK_PriseEnMain_Moteurs.s
   Uses
      None
Comment: BROCHE1 unused
BROCHE4_5 00000030

Symbol: BROCHE4_5
   Definitions
      At line 35 in file RK_PriseEnMain_Moteurs.s
   Uses
      At line 87 in file RK_PriseEnMain_Moteurs.s
      At line 91 in file RK_PriseEnMain_Moteurs.s
      At line 95 in file RK_PriseEnMain_Moteurs.s
      At line 127 in file RK_PriseEnMain_Moteurs.s
      At line 128 in file RK_PriseEnMain_Moteurs.s
      At line 180 in file RK_PriseEnMain_Moteurs.s
      At line 181 in file RK_PriseEnMain_Moteurs.s

BROCHE6_7 000000C0

Symbol: BROCHE6_7
   Definitions
      At line 43 in file RK_PriseEnMain_Moteurs.s
   Uses
      At line 107 in file RK_PriseEnMain_Moteurs.s
      At line 111 in file RK_PriseEnMain_Moteurs.s

BROCHE_4 00000010

Symbol: BROCHE_4
   Definitions
      At line 33 in file RK_PriseEnMain_Moteurs.s
   Uses
      At line 159 in file RK_PriseEnMain_Moteurs.s
      At line 160 in file RK_PriseEnMain_Moteurs.s

BROCHE_5 00000020




ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols

Symbol: BROCHE_5
   Definitions
      At line 34 in file RK_PriseEnMain_Moteurs.s
   Uses
      At line 173 in file RK_PriseEnMain_Moteurs.s
      At line 174 in file RK_PriseEnMain_Moteurs.s

BROCHE_6 00000040

Symbol: BROCHE_6
   Definitions
      At line 41 in file RK_PriseEnMain_Moteurs.s
   Uses
      At line 131 in file RK_PriseEnMain_Moteurs.s
Comment: BROCHE_6 used once
BROCHE_7 00000080

Symbol: BROCHE_7
   Definitions
      At line 42 in file RK_PriseEnMain_Moteurs.s
   Uses
      At line 133 in file RK_PriseEnMain_Moteurs.s
Comment: BROCHE_7 used once
DUREE 00080000

Symbol: DUREE
   Definitions
      At line 45 in file RK_PriseEnMain_Moteurs.s
   Uses
      At line 268 in file RK_PriseEnMain_Moteurs.s
      At line 274 in file RK_PriseEnMain_Moteurs.s

GPIO_I_PUR 00000510

Symbol: GPIO_I_PUR
   Definitions
      At line 30 in file RK_PriseEnMain_Moteurs.s
   Uses
      At line 98 in file RK_PriseEnMain_Moteurs.s
      At line 106 in file RK_PriseEnMain_Moteurs.s

GPIO_O_DEN 0000051C

Symbol: GPIO_O_DEN
   Definitions
      At line 27 in file RK_PriseEnMain_Moteurs.s
   Uses
      At line 90 in file RK_PriseEnMain_Moteurs.s
      At line 102 in file RK_PriseEnMain_Moteurs.s
      At line 110 in file RK_PriseEnMain_Moteurs.s

GPIO_O_DIR 00000400

Symbol: GPIO_O_DIR
   Definitions
      At line 19 in file RK_PriseEnMain_Moteurs.s
   Uses
      At line 86 in file RK_PriseEnMain_Moteurs.s
Comment: GPIO_O_DIR used once



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Absolute symbols

GPIO_O_DR2R 00000500

Symbol: GPIO_O_DR2R
   Definitions
      At line 23 in file RK_PriseEnMain_Moteurs.s
   Uses
      At line 94 in file RK_PriseEnMain_Moteurs.s
Comment: GPIO_O_DR2R used once
GPIO_PORTD_BASE 40007000

Symbol: GPIO_PORTD_BASE
   Definitions
      At line 16 in file RK_PriseEnMain_Moteurs.s
   Uses
      At line 106 in file RK_PriseEnMain_Moteurs.s
      At line 110 in file RK_PriseEnMain_Moteurs.s
      At line 131 in file RK_PriseEnMain_Moteurs.s
      At line 133 in file RK_PriseEnMain_Moteurs.s

GPIO_PORTE_BASE 40024000

Symbol: GPIO_PORTE_BASE
   Definitions
      At line 14 in file RK_PriseEnMain_Moteurs.s
   Uses
      At line 98 in file RK_PriseEnMain_Moteurs.s
      At line 102 in file RK_PriseEnMain_Moteurs.s

GPIO_PORTF_BASE 40025000

Symbol: GPIO_PORTF_BASE
   Definitions
      At line 12 in file RK_PriseEnMain_Moteurs.s
   Uses
      At line 86 in file RK_PriseEnMain_Moteurs.s
      At line 90 in file RK_PriseEnMain_Moteurs.s
      At line 94 in file RK_PriseEnMain_Moteurs.s
      At line 128 in file RK_PriseEnMain_Moteurs.s
      At line 160 in file RK_PriseEnMain_Moteurs.s
      At line 174 in file RK_PriseEnMain_Moteurs.s
      At line 181 in file RK_PriseEnMain_Moteurs.s

SYSCTL_PERIPH_GPIO 400FE108

Symbol: SYSCTL_PERIPH_GPIO
   Definitions
      At line 9 in file RK_PriseEnMain_Moteurs.s
   Uses
      At line 74 in file RK_PriseEnMain_Moteurs.s
Comment: SYSCTL_PERIPH_GPIO used once
18 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

MOTEUR_DROIT_ARRIERE 00000000

Symbol: MOTEUR_DROIT_ARRIERE
   Definitions
      At line 59 in file RK_PriseEnMain_Moteurs.s
   Uses
      None
Comment: MOTEUR_DROIT_ARRIERE unused
MOTEUR_DROIT_AVANT 00000000

Symbol: MOTEUR_DROIT_AVANT
   Definitions
      At line 58 in file RK_PriseEnMain_Moteurs.s
   Uses
      At line 188 in file RK_PriseEnMain_Moteurs.s
Comment: MOTEUR_DROIT_AVANT used once
MOTEUR_DROIT_INVERSE 00000000

Symbol: MOTEUR_DROIT_INVERSE
   Definitions
      At line 60 in file RK_PriseEnMain_Moteurs.s
   Uses
      None
Comment: MOTEUR_DROIT_INVERSE unused
MOTEUR_DROIT_OFF 00000000

Symbol: MOTEUR_DROIT_OFF
   Definitions
      At line 57 in file RK_PriseEnMain_Moteurs.s
   Uses
      None
Comment: MOTEUR_DROIT_OFF unused
MOTEUR_DROIT_ON 00000000

Symbol: MOTEUR_DROIT_ON
   Definitions
      At line 56 in file RK_PriseEnMain_Moteurs.s
   Uses
      At line 185 in file RK_PriseEnMain_Moteurs.s
Comment: MOTEUR_DROIT_ON used once
MOTEUR_GAUCHE_ARRIERE 00000000

Symbol: MOTEUR_GAUCHE_ARRIERE
   Definitions
      At line 65 in file RK_PriseEnMain_Moteurs.s
   Uses
      None
Comment: MOTEUR_GAUCHE_ARRIERE unused
MOTEUR_GAUCHE_AVANT 00000000

Symbol: MOTEUR_GAUCHE_AVANT
   Definitions
      At line 64 in file RK_PriseEnMain_Moteurs.s
   Uses
      At line 189 in file RK_PriseEnMain_Moteurs.s
Comment: MOTEUR_GAUCHE_AVANT used once
MOTEUR_GAUCHE_INVERSE 00000000

Symbol: MOTEUR_GAUCHE_INVERSE



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
External symbols

   Definitions
      At line 66 in file RK_PriseEnMain_Moteurs.s
   Uses
      None
Comment: MOTEUR_GAUCHE_INVERSE unused
MOTEUR_GAUCHE_OFF 00000000

Symbol: MOTEUR_GAUCHE_OFF
   Definitions
      At line 63 in file RK_PriseEnMain_Moteurs.s
   Uses
      None
Comment: MOTEUR_GAUCHE_OFF unused
MOTEUR_GAUCHE_ON 00000000

Symbol: MOTEUR_GAUCHE_ON
   Definitions
      At line 62 in file RK_PriseEnMain_Moteurs.s
   Uses
      At line 186 in file RK_PriseEnMain_Moteurs.s
Comment: MOTEUR_GAUCHE_ON used once
MOTEUR_INIT 00000000

Symbol: MOTEUR_INIT
   Definitions
      At line 54 in file RK_PriseEnMain_Moteurs.s
   Uses
      At line 123 in file RK_PriseEnMain_Moteurs.s
Comment: MOTEUR_INIT used once
11 symbols
394 symbols in table
