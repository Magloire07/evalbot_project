


ARM Macro Assembler    Page 1 


    1 00000000         ;-------------------------------------------------------
                       -----
    2 00000000         ;#Authors
    3 00000000         ;@Kokou KOMBEDE
    4 00000000         ;@Ounissa SADAOUI
    5 00000000         ;Parcours E3FI-3I
    6 00000000         ;année 2024-2025
    7 00000000         ;-------------------------------------------------------
                       ------
    8 00000000         ; RK - Evalbot (Cortex M3 de Texas Instrument)
    9 00000000         ; programme - Pilotage  Evalbot pour parcouris un labyri
                       nthe
   10 00000000         ;-------------------------------------------------------
                       -------
   11 00000000         
   12 00000000                 AREA             |.text|, CODE, READONLY
   13 00000000         
   14 00000000         ; This register controls the clock gating logic in norma
                       l Run mode
   15 00000000 400FE108 
                       SYSCTL_PERIPH_GPIO
                               EQU              0x400FE108  ; SYSCTL_RCGC2_R (p
                                                            291 datasheet de lm
                                                            3s9b92.pdf)
   16 00000000         
   17 00000000 40025000 
                       GPIO_PORTF_BASE
                               EQU              0x40025000  ; GPIO Port F (APB)
                                                             base: 0x4002.5000 
                                                            
   18 00000000         
   19 00000000 40024000 
                       GPIO_PORTE_BASE
                               EQU              0x40024000  ; GPIO Port E (APB)
                                                             base: 0x4002.4000
   20 00000000         
   21 00000000 40007000 
                       GPIO_PORTD_BASE
                               EQU              0x40007000  ; GPIO Port D (APB)
                                                             base: 0x4000.7000
   22 00000000         
   23 00000000         ; configure the corresponding pin to be an output
   24 00000000 00000400 
                       GPIO_O_DIR
                               EQU              0x00000400  ; GPIO Direction (p
                                                            417 datasheet de lm
                                                            3s9B92.pdf)
   25 00000000         
   26 00000000         ; The GPIODR2R register is the 2-mA drive control regist
                       er
   27 00000000         ; By default, all GPIO pins have 2-mA drive.
   28 00000000 00000500 
                       GPIO_O_DR2R
                               EQU              0x00000500  ; GPIO 2-mA Drive S
                                                            elect (p428 datashe
                                                            et de lm3s9B92.pdf)
                                                            
   29 00000000         
   30 00000000         ; Digital enable register



ARM Macro Assembler    Page 2 


   31 00000000         ; To use the pin as a digital input or output, the corre
                       sponding GPIODEN bit must be set.
   32 00000000 0000051C 
                       GPIO_O_DEN
                               EQU              0x0000051C  ; GPIO Digital Enab
                                                            le (p437 datasheet 
                                                            de lm3s9B92.pdf)
   33 00000000         
   34 00000000         ; Pul_up
   35 00000000 00000510 
                       GPIO_I_PUR
                               EQU              0x00000510  ; GPIO Pull-Up (p43
                                                            2 datasheet de lm3s
                                                            9B92.pdf)
   36 00000000         
   37 00000000         ;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^DECLARATION PINS ou BROCH
                       ES ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   38 00000000         ; LED
   39 00000000 00000010 
                       BROCHE_4
                               EQU              0x10        ; led1
   40 00000000 00000020 
                       BROCHE_5
                               EQU              0x20        ; led2 
   41 00000000 00000030 
                       BROCHE4_5
                               EQU              0x30        ; led1 & led2 sur b
                                                            roche 4 et 5 0b0011
                                                            0000
   42 00000000         ; BUMPER
   43 00000000 00000001 
                       BROCHE0 EQU              0x1         ; bumper_R
   44 00000000 00000002 
                       BROCHE1 EQU              0x2         ; bumper_L
   45 00000000 00000003 
                       BROCHE0_1
                               EQU              0x3         ; bumperR_L
   46 00000000         ; SWITCH
   47 00000000 00000040 
                       BROCHE_6
                               EQU              0x40        ; switch1
   48 00000000 00000080 
                       BROCHE_7
                               EQU              0x80        ; switch2 
   49 00000000 000000C0 
                       BROCHE6_7
                               EQU              0xC0        ; sw1 et sw2
   50 00000000         
   51 00000000 00080000 
                       DUREE   EQU              0x80000     ; durée fréquence c
                                                            lignotement multipl
                                                            e  
   52 00000000         ;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   53 00000000         ;; registres utilisés 
   54 00000000         ;;---------------------------------------------
   55 00000000         ;;   R0  R1 R2  R3  R4  R5  R6  R7 R8  R9 R10
   56 00000000         ;;---------------------------------------------
   57 00000000         ;; registres réservés 



ARM Macro Assembler    Page 3 


   58 00000000         ;;---------------------------------------------
   59 00000000         ;;  R2  R5  R9 
   60 00000000         ;;---------------------------------------------
   61 00000000         ;; usages courants des régistres
   62 00000000         ;;---------------------------------------
   63 00000000         ;; r3,r2,r6 pour lire les pins de leds et allumer puis é
                       teindre
   64 00000000         ;; r7,r8,r10 pour lire les pins des switchs et bumpers 
   65 00000000         ;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   66 00000000                 ENTRY
   67 00000000                 EXPORT           __main
   68 00000000         ;; The IMPORT command specifies that a symbol is defined
                        in a shared object at runtime.
   69 00000000                 IMPORT           MOTEUR_INIT ; initialise les mo
                                                            teurs (configure le
                                                            s pwms + GPIO)
   70 00000000         
   71 00000000                 IMPORT           MOTEUR_DROIT_ON ; activer le mo
                                                            teur droit
   72 00000000                 IMPORT           MOTEUR_DROIT_OFF ; déactiver le
                                                             moteur droit
   73 00000000                 IMPORT           MOTEUR_DROIT_AVANT ; moteur dro
                                                            it tourne vers l'av
                                                            ant
   74 00000000                 IMPORT           MOTEUR_DROIT_ARRIERE ; moteur d
                                                            roit tourne vers l'
                                                            arrière
   75 00000000                 IMPORT           MOTEUR_DROIT_INVERSE ; inverse 
                                                            le sens de rotation
                                                             du moteur droit
   76 00000000         
   77 00000000                 IMPORT           MOTEUR_GAUCHE_ON ; activer le m
                                                            oteur gauche
   78 00000000                 IMPORT           MOTEUR_GAUCHE_OFF ; déactiver l
                                                            e moteur gauche
   79 00000000                 IMPORT           MOTEUR_GAUCHE_AVANT ; moteur ga
                                                            uche tourne vers l'
                                                            avant
   80 00000000                 IMPORT           MOTEUR_GAUCHE_ARRIERE ; moteur 
                                                            gauche tourne vers 
                                                            l'arrière
   81 00000000                 IMPORT           MOTEUR_GAUCHE_INVERSE ; inverse
                                                             le sens de rotatio
                                                            n du moteur gauche
   82 00000000         ;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   83 00000000         __main
   84 00000000         
   85 00000000 F8DF 9184       LDR              R9, =buffer ; Charger l'adresse
                                                             de buffer dans R0
   86 00000004 F04F 0200       mov              r2, #0x000  ; pour eteindre LED
                                                            
   87 00000008 F04F 0500       mov              R5, #0      ; compteur de d'ind
                                                            ice dans la tableau
                                                             
   88 0000000C         
   89 0000000C         
   90 0000000C 4E5F            ldr              r6, = SYSCTL_PERIPH_GPIO 



ARM Macro Assembler    Page 4 


                                                            ;; RCGC2
   91 0000000E F04F 0038       mov              r0, #0x00000038 ;; Enable clock
                                                             sur GPIO E , F  et
                                                             D où sont branchés
                                                             les leds (0x28 == 
                                                            0b111000)
   92 00000012 6030            str              r0, [r6]
   93 00000014         ;; "There must be a delay of 3 system clocks before any 
                       GPIO reg. access  (p413 datasheet de lm3s9B92.pdf)
   94 00000014 BF00            nop                          ;; tres tres import
                                                            ant....
   95 00000016 BF00            nop
   96 00000018 BF00            nop                          ;; pas necessaire e
                                                            n simu ou en debbug
                                                             step by step...
   97 0000001A         
   98 0000001A         
   99 0000001A         ;--------------------------------------------------CONFI
                       GURATION LED 4_5----------------------------------------
                       ------------------------------     
  100 0000001A         
  101 0000001A 4E5D            ldr              r6, = GPIO_PORTF_BASE+GPIO_O_DI
R 
                                                            ;; 1 Pin du portF e
                                                            n sortie (broche 4 
                                                            : 00010000)
  102 0000001C F04F 0030       ldr              r0, = BROCHE4_5
  103 00000020 6030            str              r0, [r6]
  104 00000022         
  105 00000022 4E5C            ldr              r6, = GPIO_PORTF_BASE+GPIO_O_DE
N 
                                                            ;; Enable Digital F
                                                            unction 
  106 00000024 F04F 0030       ldr              r0, = BROCHE4_5
  107 00000028 6030            str              r0, [r6]
  108 0000002A         
  109 0000002A 4E5B            ldr              r6, = GPIO_PORTF_BASE+GPIO_O_DR
2R 
                                                            ;; Choix de l'inten
                                                            sité de sortie (2mA
                                                            )
  110 0000002C F04F 0030       ldr              r0, = BROCHE4_5
  111 00000030 6030            str              r0, [r6]
  112 00000032         ;-------------------------------------------------------
                       CONFIGURATION Bumper0_1---------------------------------
                       --------------------------------
  113 00000032 4E5A            ldr              r6, = GPIO_PORTE_BASE+GPIO_I_PU
R 
                                                            ;; Pul_up 
  114 00000034 F04F 0003       ldr              r0, = BROCHE0_1
  115 00000038 6030            str              r0, [r6]
  116 0000003A         
  117 0000003A 4E59            ldr              r6, = GPIO_PORTE_BASE+GPIO_O_DE
N 
                                                            ; Enable Digital Fu
                                                            nction 
  118 0000003C F04F 0003       ldr              r0, = BROCHE0_1
  119 00000040 6030            str              r0, [r6]
  120 00000042         ;-------------------------------------------------------



ARM Macro Assembler    Page 5 


                       CONFIGURATION Switch6_7---------------------------------
                       --------------------------------
  121 00000042 4E58            ldr              r6, = GPIO_PORTD_BASE+GPIO_I_PU
R 
                                                            ; Pul_up 
  122 00000044 F04F 00C0       ldr              r0, = BROCHE6_7
  123 00000048 6030            str              r0, [r6]
  124 0000004A         
  125 0000004A 4E57            ldr              r6, = GPIO_PORTD_BASE+GPIO_O_DE
N 
                                                            ;; Enable Digital F
                                                            unction 
  126 0000004C F04F 00C0       ldr              r0, = BROCHE6_7
  127 00000050 6030            str              r0, [r6]
  128 00000052         
  129 00000052         ;-------------------------------------------------------
                       --------------------------------------------------------
                       ---------   
  130 00000052         ; Configure les PWM + GPIO
  131 00000052 F7FF FFFE       BL               MOTEUR_INIT
  132 00000056         ;-------------------------------------------------------
                       --------------------------------------------------------
                       ---------   
  133 00000056         ; allumage des deux leds
  134 00000056 F04F 0330       mov              r3, #BROCHE4_5
  135 0000005A 4E54            ldr              r6, = GPIO_PORTF_BASE + (BROCHE
4_5<<2)
  136 0000005C 6033            str              r3, [r6]
  137 0000005E         
  138 0000005E         ;---------------------------------------------LECTURE DU
                        PREMIER APPUIS LONG -----------------------------------
                       -----------------------------------     
  139 0000005E         ReadState
  140 0000005E 4F54            ldr              r7, = GPIO_PORTD_BASE + (BROCHE
_6<<2)
  141 00000060 F8D7 A000       ldr              r10,[r7]
  142 00000064 F1BA 0F00       CMP              r10,#0x00
  143 00000068 D1F9            BNE              ReadState
  144 0000006A E033            B                checkAppuisLong
  145 0000006C         ;----------------------------------------------DEBUIT PR
                       OGRAMMATION DES DIRECTIONS -----------------------------
                       ---------------------------------------------   
  146 0000006C         DebutProgrammation
  147 0000006C F000 F859       BL               Clignotement
  148 00000070         ReadGauche
  149 00000070 4F4F            ldr              r7, = GPIO_PORTD_BASE + (BROCHE
_6<<2) 
                                                            ; affectation du sw
                                                            itch 1 
  150 00000072 F8D7 A000       ldr              r10,[r7]    ; lecture de l'état
                                                             du switch 1
  151 00000076 F1BA 0F00       CMP              r10,#0x00   ; vérifier si c'est
                                                             appuyé
  152 0000007A D108            BNE              ReadDroit   ; on  branche vers 
                                                            le switch1( gauche)
                                                             pour tester  si ja
                                                            mais le droit n'est
                                                             pas appuyé 
  153 0000007C E035            B                checkAppuisLongGauche ; on véri



ARM Macro Assembler    Page 6 


                                                            fie si l'appuis est
                                                             long
  154 0000007E         ;-------------------------------------------------------
                       --------------------------------------------------------
                       ---------
  155 0000007E         appuisCourtGauche
  156 0000007E         ; on allume la led gauche pour signaler le clic 
  157 0000007E F04F 0310       mov              r3, #BROCHE_4
  158 00000082 4E4C            ldr              r6, = GPIO_PORTF_BASE + (BROCHE
_4<<2)
  159 00000084 F000 F847       BL               clignoteAuClic 
                                                            ; gère l'allumage
  160 00000088         
  161 00000088         ; on définit l'entier correspondant à la direction gauch
                       e 
  162 00000088 F04F 0A01       mov              r10,#1      ; 1 pour  gauche 
  163 0000008C E01D            B                ecrireDirection ; écrir dans bu
                                                            ffer la direction 
  164 0000008E         ;-------------------------------------------------------
                       --------------------------------------------------------
                       ---------
  165 0000008E         ReadDroit
  166 0000008E 4F4A            ldr              r7, = GPIO_PORTD_BASE + (BROCHE
_7<<2)
  167 00000090 F8D7 A000       ldr              r10,[r7]
  168 00000094 F1BA 0F00       CMP              r10,#0x00
  169 00000098 D1EA            BNE              ReadGauche
  170 0000009A E031            B                checkAppuisLongDroit ; on vérif
                                                            i si l'appuis est l
                                                            ong ou court
  171 0000009C         ;-------------------------------------------------------
                       --------------------------------------------------------
                       ---------
  172 0000009C         appuisCourtDroit                     ; si on arrive à ce
                                                            tte étiquette alors
                                                             l'appuis est court
                                                            
  173 0000009C         ; on allume la led droite pour signaler le clic 
  174 0000009C F04F 0320       mov              r3, #BROCHE_5
  175 000000A0 4E46            ldr              r6, = GPIO_PORTF_BASE + (BROCHE
_5<<2)
  176 000000A2 F000 F838       BL               clignoteAuClic 
                                                            ; gère l'allumage
  177 000000A6         
  178 000000A6         ; on définit l'entier correspondant à la direction gauch
                       e 
  179 000000A6 F04F 0A02       mov              r10,#2      ; 2 pour  droite 
  180 000000AA E00E            B                ecrireDirection ; écrir dans ta
                                                            bleau la direction 
                                                            
  181 000000AC         
  182 000000AC         ;------------------------------------------------FIN PRO
                       GRAMMATION DES DIRECTIONS-------------------------------
                       ---------------------------------
  183 000000AC         ; le programme est enregistré maintemant
  184 000000AC         ; on peut parcourir le labyrinthe
  185 000000AC         FinProgrammation
  186 000000AC         ; on on clignote pour signaler fin de la programmation 
  187 000000AC F04F 0330       mov              r3, #BROCHE4_5



ARM Macro Assembler    Page 7 


  188 000000B0 4E3E            ldr              r6, = GPIO_PORTF_BASE + (BROCHE
4_5<<2)
  189 000000B2 F000 F836       BL               Clignotement
  190 000000B6         ;---------------------------------------------------PARC
                       OURS DU LABYRINTHE--------------------------------------
                       -----------------------  
  191 000000B6         parcours
  192 000000B6         ; Activer les deux moteurs droit et gauche
  193 000000B6 F7FF FFFE       BL               MOTEUR_DROIT_ON
  194 000000BA F7FF FFFE       BL               MOTEUR_GAUCHE_ON
  195 000000BE         ; Evalbot avance droit devant
  196 000000BE F7FF FFFE       BL               MOTEUR_DROIT_AVANT
  197 000000C2 F7FF FFFE       BL               MOTEUR_GAUCHE_AVANT
  198 000000C6         
  199 000000C6 E045            B                testCollision
  200 000000C8         
  201 000000C8         
  202 000000C8         
  203 000000C8         
  204 000000C8         
  205 000000C8         
  206 000000C8         
  207 000000C8         
  208 000000C8         
  209 000000C8         
  210 000000C8         
  211 000000C8         
  212 000000C8         
  213 000000C8         
  214 000000C8         
  215 000000C8         
  216 000000C8         
  217 000000C8         
  218 000000C8         
  219 000000C8         
  220 000000C8         
  221 000000C8 E7F5            b                parcours
  222 000000CA         ;-----------------------------------------------FIN PARC
                       OURS DU LABYRINTHE--------------------------------------
                       -----------------------------------  
  223 000000CA         
  224 000000CA         ecrireDirection
  225 000000CA F809 A005       STRB             R10, [R9, R5] ; écrire dans le 
                                                            tableau à l'indice 
                                                            indiqué par R5
  226 000000CE F105 0501       ADD              R5,#1       ; incrémentation du
                                                             compteur 
  227 000000D2 E7CD            B                ReadGauche  ; on retourne à la 
                                                            lecture des directi
                                                            on 
  228 000000D4         
  229 000000D4         ;-----------------------------------------------DEBUT LO
                       GIQUE APUIS LONG ---------------------------------------
                       ---------------------------------- 
  230 000000D4         ;dureé R1 correspond à la duree 
  231 000000D4         ;de l'appuis long  envirion 2seconde
  232 000000D4 F44F 217F 
                       checkAppuisLong
                               ldr              r1, =0xFF000



ARM Macro Assembler    Page 8 


  233 000000D8         wait0
  234 000000D8 4F35            ldr              r7, = GPIO_PORTD_BASE + (BROCHE
_6<<2)
  235 000000DA F8D7 A000       ldr              r10,[r7]
  236 000000DE F1BA 0F00       CMP              r10,#0x00
  237 000000E2 D1BC            BNE              ReadState   ; si l'utilisateur 
                                                            relâche pendant le 
                                                            wait  c'est à dire 
                                                             r10=0x01 , on reco
                                                            mmence 
  238 000000E4 3901            subs             r1, #1
  239 000000E6 D1F7            bne              wait0
  240 000000E8 E7C0            B                DebutProgrammation
  241 000000EA         
  242 000000EA         ;-------------------------------------------------------
                       --------------------------------------------------------
                       ---------
  243 000000EA         checkAppuisLongGauche
  244 000000EA F44F 217F       ldr              r1, =0xFF000 ; R1 correspond à 
                                                            la duree de l'appui
                                                            s long 
  245 000000EE         wait01
  246 000000EE 4F30            ldr              r7, = GPIO_PORTD_BASE + (BROCHE
_6<<2)
  247 000000F0 F8D7 A000       ldr              r10,[r7]
  248 000000F4 F1BA 0F00       CMP              r10,#0x00
  249 000000F8 D1C1            BNE              appuisCourtGauche ; si l'utilis
                                                            ateur relâche penda
                                                            nt le wait  c'est-à
                                                            -dire  r10=0x01 , c
                                                            'est un appuis cour
                                                            t sur gauche 
  250 000000FA 3901            subs             r1, #1      ; sinon on continue
                                                             de lire dans que d
                                                            urée n'est pas acro
                                                            ulé
  251 000000FC D1F7            bne              wait01
  252 000000FE E7D5            B                FinProgrammation ; si on arrive
                                                             ici alor l'appuis 
                                                            est long donc c'est
                                                             la fin de la progr
                                                            ammation 
  253 00000100         ;-------------------------------------------------------
                       --------------------------------------------------------
                       ---------
  254 00000100         checkAppuisLongDroit
  255 00000100 F44F 217F       ldr              r1, =0xFF000 ; correspond à la 
                                                            duree de l'appuis l
                                                            ong 
  256 00000104         wait02
  257 00000104 4F2C            ldr              r7, = GPIO_PORTD_BASE + (BROCHE
_7<<2)
  258 00000106 F8D7 A000       ldr              r10,[r7]
  259 0000010A F1BA 0F00       CMP              r10,#0x00
  260 0000010E D1C5            BNE              appuisCourtDroit ; si l'utilisa
                                                            teur relâche pendan
                                                            t le wait  c'est-à-
                                                            dire r10=0x01 , c'e
                                                            st un appuis court 



ARM Macro Assembler    Page 9 


                                                            sur droit
  261 00000110 3901            subs             r1, #1
  262 00000112 D1F7            bne              wait02
  263 00000114 E7CA            B                FinProgrammation
  264 00000116         ;------------------------------------------------DEBUT L
                       OGIQUES DE CLIGNOTEMENTS -------------------------------
                       -----------------------------------------
  265 00000116         ; logique du clignote simple  à chaque touche 
  266 00000116         clignoteAuClic
  267 00000116 492A            ldr              r1, =0xFFFFF ; durée d'allumage
                                                            
  268 00000118 6033            str              r3, [r6]    ; allumer la led co
                                                            rrespondant dans R3
                                                            
  269 0000011A 3901    wait21  subs             r1, #1
  270 0000011C D1FD            bne              wait21
  271 0000011E 6032            str              r2, [r6]    ;; Eteint LED car r
                                                            2 = 0x00      
  272 00000120 4770            BX               LR          ;; retour à l'endro
                                                            it ou clignoteAuCli
                                                            c est appeler 
  273 00000122         ;-------------------------------------------------------
                       --------------------------------------------------------
                       ---------
  274 00000122         ; logique de clignotement multiple   avant et apprès le 
                       programmation 
  275 00000122         Clignotement
  276 00000122 F04F 0408       ldr              r4, =0x8    ; durée de clignote
                                                            ment
  277 00000126 F04F 0330       mov              r3, #BROCHE4_5
  278 0000012A 4E20            ldr              r6, = GPIO_PORTF_BASE + (BROCHE
4_5<<2)
  279 0000012C 6033            str              r3, [r6]    ;; Allume LED1&2 po
                                                            rtF broche 4&5 : 00
                                                            110000 (contenu de 
                                                            r3)
  280 0000012E         loop
  281 0000012E 6032            str              r2, [r6]    ;; Eteint LED car r
                                                            2 = 0x00      
  282 00000130 F44F 2100       ldr              r1, = DUREE ;; pour la duree de
                                                             la boucle d'attent
                                                            e1 (wait1)
  283 00000134         
  284 00000134 3901    wait1   subs             r1, #1
  285 00000136 D1FD            bne              wait1
  286 00000138         
  287 00000138 6033            str              r3, [r6]    ;; Allume LED1&2 po
                                                            rtF broche 4&5 : 00
                                                            110000 (contenu de 
                                                            r3)
  288 0000013A F44F 2100       ldr              r1, = DUREE ;; pour la duree de
                                                             la boucle d'attent
                                                            e2 (wait2)
  289 0000013E         
  290 0000013E 3901    wait2   subs             r1, #1
  291 00000140 D1FD            bne              wait2
  292 00000142         
  293 00000142 3C01            subs             r4, #1      ; contrôle le temp 
                                                            de clignotement 



ARM Macro Assembler    Page 10 


  294 00000144 D1F3            bne              loop
  295 00000146         
  296 00000146 6032            str              r2, [r6]    ;; Eteint LED car r
                                                            2 = 0x00      
  297 00000148 4770            BX               LR
  298 0000014A         ;-------------------------------------------------------
                       --------------------------------------------------------
                       ---------
  299 0000014A         ;; Boucle d'attente   simple  sans rien faire 
  300 0000014A F44F 21A4 
                       WAIT    ldr              r1, =0x052000
  301 0000014E 3901    wait3   subs             r1, #1
  302 00000150 D1FD            bne              wait3
  303 00000152 4770            BX               LR
  304 00000154         ;----------------------------------TEST DE COLLISION ---
                       --------------------------------------------------------
                       ---------------------------
  305 00000154         
  306 00000154         testCollision
  307 00000154 4F1B            ldr              r7, = GPIO_PORTE_BASE + (BROCHE
0<<2)
  308 00000156 F8DF 8070       ldr              r8, = GPIO_PORTE_BASE + (BROCHE
1<<2)
  309 0000015A         
  310 0000015A F8D8 A000       ldr              r10,[r8]    ; lecture de l'état
                                                             du bp_0
  311 0000015E 683C            ldr              r4,[r7]     ; lecture de l'état
                                                             du bp_1
  312 00000160 F1BA 0F00       CMP              r10,#0x00
  313 00000164 D106            BNE              testBp1
  314 00000166 F7FF FFFE       BL               MOTEUR_GAUCHE_OFF ; déactiver l
                                                            e moteur gauche
  315 0000016A F7FF FFFE       BL               MOTEUR_DROIT_OFF ; déactiver le
                                                             moteur droit
  316 0000016E F7FF FFD8       BL               Clignotement ; on clignote à ch
                                                            aque collision 
  317 00000172         
  318 00000172 E008            B                lectureMemoire
  319 00000174         
  320 00000174         
  321 00000174         testBp1
  322 00000174 2C00            CMP              r4,#0x00
  323 00000176 D19E            BNE              parcours
  324 00000178 F7FF FFFE       BL               MOTEUR_GAUCHE_OFF ; déactiver l
                                                            e moteur gauche
  325 0000017C F7FF FFFE       BL               MOTEUR_DROIT_OFF ; déactiver le
                                                             moteur droit
  326 00000180 F7FF FFCF       BL               Clignotement ; on clignote à ch
                                                            aque collision
  327 00000184         
  328 00000184 E7FF            B                lectureMemoire
  329 00000186         ;----------------------------------LECTURE  MEMOIRE ----
                       --------------------------------------------------------
                       --------------------------
  330 00000186         lectureMemoire
  331 00000186         
  332 00000186         ;--------------------------------------------------DECLA
                       RATION TABLEAU CONTENANT LE PROGRAMME ------------------
                       --------------------------------------------------------



ARM Macro Assembler    Page 11 


                       ----
  333 00000186         
  334 00000186         
  335 00000186 BF00            NOP
  336 00000188         
  337 00000188 00000000 
              400FE108 
              40025400 
              4002551C 
              40025500 
              40024510 
              4002451C 
              40007510 
              4000751C 
              400250C0 
              40007100 
              40025040 
              40007200 
              40025080 
              000FFFFF 
              40024004 
              40024008         AREA             |variable|, DATA, READWRITE
  338 00000000 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00    buffer  space            50          ;   tableau de 50 o
                                                            ctets pour contenir
                                                             les instructions 
  339 00000032                 END
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M3 --apcs=interw
ork --depend=.\objects\rk_priseenmain_moteurs.d -o.\objects\rk_priseenmain_mote
urs.o -I.\RTE\_Target_1 -IC:\Users\maglo\AppData\Local\Arm\Packs\ARM\CMSIS\5.5.
1\CMSIS\Core\Include -IC:\Users\maglo\AppData\Local\Arm\Packs\ARM\CMSIS\5.5.1\D
evice\ARM\ARMCM3\Include --predefine="__EVAL SETA 1" --predefine="__MICROLIB SE
TA 1" --predefine="__UVISION_VERSION SETA 528" --predefine="_RTE_ SETA 1" --pre
define="ARMCM3 SETA 1" --list=.\listings\rk_priseenmain_moteurs.lst RK_PriseEnM
ain_Moteurs.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 12 in file RK_PriseEnMain_Moteurs.s
   Uses
      None
Comment: .text unused
Clignotement 00000122

Symbol: Clignotement
   Definitions
      At line 275 in file RK_PriseEnMain_Moteurs.s
   Uses
      At line 147 in file RK_PriseEnMain_Moteurs.s
      At line 189 in file RK_PriseEnMain_Moteurs.s
      At line 316 in file RK_PriseEnMain_Moteurs.s
      At line 326 in file RK_PriseEnMain_Moteurs.s

DebutProgrammation 0000006C

Symbol: DebutProgrammation
   Definitions
      At line 146 in file RK_PriseEnMain_Moteurs.s
   Uses
      At line 240 in file RK_PriseEnMain_Moteurs.s
Comment: DebutProgrammation used once
FinProgrammation 000000AC

Symbol: FinProgrammation
   Definitions
      At line 185 in file RK_PriseEnMain_Moteurs.s
   Uses
      At line 252 in file RK_PriseEnMain_Moteurs.s
      At line 263 in file RK_PriseEnMain_Moteurs.s

ReadDroit 0000008E

Symbol: ReadDroit
   Definitions
      At line 165 in file RK_PriseEnMain_Moteurs.s
   Uses
      At line 152 in file RK_PriseEnMain_Moteurs.s
Comment: ReadDroit used once
ReadGauche 00000070

Symbol: ReadGauche
   Definitions
      At line 148 in file RK_PriseEnMain_Moteurs.s
   Uses
      At line 169 in file RK_PriseEnMain_Moteurs.s
      At line 227 in file RK_PriseEnMain_Moteurs.s

ReadState 0000005E

Symbol: ReadState
   Definitions
      At line 139 in file RK_PriseEnMain_Moteurs.s
   Uses



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

      At line 143 in file RK_PriseEnMain_Moteurs.s
      At line 237 in file RK_PriseEnMain_Moteurs.s

WAIT 0000014A

Symbol: WAIT
   Definitions
      At line 300 in file RK_PriseEnMain_Moteurs.s
   Uses
      None
Comment: WAIT unused
__main 00000000

Symbol: __main
   Definitions
      At line 83 in file RK_PriseEnMain_Moteurs.s
   Uses
      At line 67 in file RK_PriseEnMain_Moteurs.s
Comment: __main used once
appuisCourtDroit 0000009C

Symbol: appuisCourtDroit
   Definitions
      At line 172 in file RK_PriseEnMain_Moteurs.s
   Uses
      At line 260 in file RK_PriseEnMain_Moteurs.s
Comment: appuisCourtDroit used once
appuisCourtGauche 0000007E

Symbol: appuisCourtGauche
   Definitions
      At line 155 in file RK_PriseEnMain_Moteurs.s
   Uses
      At line 249 in file RK_PriseEnMain_Moteurs.s
Comment: appuisCourtGauche used once
checkAppuisLong 000000D4

Symbol: checkAppuisLong
   Definitions
      At line 232 in file RK_PriseEnMain_Moteurs.s
   Uses
      At line 144 in file RK_PriseEnMain_Moteurs.s
Comment: checkAppuisLong used once
checkAppuisLongDroit 00000100

Symbol: checkAppuisLongDroit
   Definitions
      At line 254 in file RK_PriseEnMain_Moteurs.s
   Uses
      At line 170 in file RK_PriseEnMain_Moteurs.s
Comment: checkAppuisLongDroit used once
checkAppuisLongGauche 000000EA

Symbol: checkAppuisLongGauche
   Definitions
      At line 243 in file RK_PriseEnMain_Moteurs.s
   Uses
      At line 153 in file RK_PriseEnMain_Moteurs.s
Comment: checkAppuisLongGauche used once



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

clignoteAuClic 00000116

Symbol: clignoteAuClic
   Definitions
      At line 266 in file RK_PriseEnMain_Moteurs.s
   Uses
      At line 159 in file RK_PriseEnMain_Moteurs.s
      At line 176 in file RK_PriseEnMain_Moteurs.s

ecrireDirection 000000CA

Symbol: ecrireDirection
   Definitions
      At line 224 in file RK_PriseEnMain_Moteurs.s
   Uses
      At line 163 in file RK_PriseEnMain_Moteurs.s
      At line 180 in file RK_PriseEnMain_Moteurs.s

lectureMemoire 00000186

Symbol: lectureMemoire
   Definitions
      At line 330 in file RK_PriseEnMain_Moteurs.s
   Uses
      At line 318 in file RK_PriseEnMain_Moteurs.s
      At line 328 in file RK_PriseEnMain_Moteurs.s

loop 0000012E

Symbol: loop
   Definitions
      At line 280 in file RK_PriseEnMain_Moteurs.s
   Uses
      At line 294 in file RK_PriseEnMain_Moteurs.s
Comment: loop used once
parcours 000000B6

Symbol: parcours
   Definitions
      At line 191 in file RK_PriseEnMain_Moteurs.s
   Uses
      At line 221 in file RK_PriseEnMain_Moteurs.s
      At line 323 in file RK_PriseEnMain_Moteurs.s

testBp1 00000174

Symbol: testBp1
   Definitions
      At line 321 in file RK_PriseEnMain_Moteurs.s
   Uses
      At line 313 in file RK_PriseEnMain_Moteurs.s
Comment: testBp1 used once
testCollision 00000154

Symbol: testCollision
   Definitions
      At line 306 in file RK_PriseEnMain_Moteurs.s
   Uses
      At line 199 in file RK_PriseEnMain_Moteurs.s



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Relocatable symbols

Comment: testCollision used once
wait0 000000D8

Symbol: wait0
   Definitions
      At line 233 in file RK_PriseEnMain_Moteurs.s
   Uses
      At line 239 in file RK_PriseEnMain_Moteurs.s
Comment: wait0 used once
wait01 000000EE

Symbol: wait01
   Definitions
      At line 245 in file RK_PriseEnMain_Moteurs.s
   Uses
      At line 251 in file RK_PriseEnMain_Moteurs.s
Comment: wait01 used once
wait02 00000104

Symbol: wait02
   Definitions
      At line 256 in file RK_PriseEnMain_Moteurs.s
   Uses
      At line 262 in file RK_PriseEnMain_Moteurs.s
Comment: wait02 used once
wait1 00000134

Symbol: wait1
   Definitions
      At line 284 in file RK_PriseEnMain_Moteurs.s
   Uses
      At line 285 in file RK_PriseEnMain_Moteurs.s
Comment: wait1 used once
wait2 0000013E

Symbol: wait2
   Definitions
      At line 290 in file RK_PriseEnMain_Moteurs.s
   Uses
      At line 291 in file RK_PriseEnMain_Moteurs.s
Comment: wait2 used once
wait21 0000011A

Symbol: wait21
   Definitions
      At line 269 in file RK_PriseEnMain_Moteurs.s
   Uses
      At line 270 in file RK_PriseEnMain_Moteurs.s
Comment: wait21 used once
wait3 0000014E

Symbol: wait3
   Definitions
      At line 301 in file RK_PriseEnMain_Moteurs.s
   Uses
      At line 302 in file RK_PriseEnMain_Moteurs.s
Comment: wait3 used once
28 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

buffer 00000000

Symbol: buffer
   Definitions
      At line 338 in file RK_PriseEnMain_Moteurs.s
   Uses
      At line 85 in file RK_PriseEnMain_Moteurs.s
Comment: buffer used once
variable 00000000

Symbol: variable
   Definitions
      At line 337 in file RK_PriseEnMain_Moteurs.s
   Uses
      None
Comment: variable unused
2 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

BROCHE0 00000001

Symbol: BROCHE0
   Definitions
      At line 43 in file RK_PriseEnMain_Moteurs.s
   Uses
      At line 307 in file RK_PriseEnMain_Moteurs.s
Comment: BROCHE0 used once
BROCHE0_1 00000003

Symbol: BROCHE0_1
   Definitions
      At line 45 in file RK_PriseEnMain_Moteurs.s
   Uses
      At line 114 in file RK_PriseEnMain_Moteurs.s
      At line 118 in file RK_PriseEnMain_Moteurs.s

BROCHE1 00000002

Symbol: BROCHE1
   Definitions
      At line 44 in file RK_PriseEnMain_Moteurs.s
   Uses
      At line 308 in file RK_PriseEnMain_Moteurs.s
Comment: BROCHE1 used once
BROCHE4_5 00000030

Symbol: BROCHE4_5
   Definitions
      At line 41 in file RK_PriseEnMain_Moteurs.s
   Uses
      At line 102 in file RK_PriseEnMain_Moteurs.s
      At line 106 in file RK_PriseEnMain_Moteurs.s
      At line 110 in file RK_PriseEnMain_Moteurs.s
      At line 134 in file RK_PriseEnMain_Moteurs.s
      At line 135 in file RK_PriseEnMain_Moteurs.s
      At line 187 in file RK_PriseEnMain_Moteurs.s
      At line 188 in file RK_PriseEnMain_Moteurs.s
      At line 277 in file RK_PriseEnMain_Moteurs.s
      At line 278 in file RK_PriseEnMain_Moteurs.s

BROCHE6_7 000000C0

Symbol: BROCHE6_7
   Definitions
      At line 49 in file RK_PriseEnMain_Moteurs.s
   Uses
      At line 122 in file RK_PriseEnMain_Moteurs.s
      At line 126 in file RK_PriseEnMain_Moteurs.s

BROCHE_4 00000010

Symbol: BROCHE_4
   Definitions
      At line 39 in file RK_PriseEnMain_Moteurs.s
   Uses
      At line 157 in file RK_PriseEnMain_Moteurs.s
      At line 158 in file RK_PriseEnMain_Moteurs.s




ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols

BROCHE_5 00000020

Symbol: BROCHE_5
   Definitions
      At line 40 in file RK_PriseEnMain_Moteurs.s
   Uses
      At line 174 in file RK_PriseEnMain_Moteurs.s
      At line 175 in file RK_PriseEnMain_Moteurs.s

BROCHE_6 00000040

Symbol: BROCHE_6
   Definitions
      At line 47 in file RK_PriseEnMain_Moteurs.s
   Uses
      At line 140 in file RK_PriseEnMain_Moteurs.s
      At line 149 in file RK_PriseEnMain_Moteurs.s
      At line 234 in file RK_PriseEnMain_Moteurs.s
      At line 246 in file RK_PriseEnMain_Moteurs.s

BROCHE_7 00000080

Symbol: BROCHE_7
   Definitions
      At line 48 in file RK_PriseEnMain_Moteurs.s
   Uses
      At line 166 in file RK_PriseEnMain_Moteurs.s
      At line 257 in file RK_PriseEnMain_Moteurs.s

DUREE 00080000

Symbol: DUREE
   Definitions
      At line 51 in file RK_PriseEnMain_Moteurs.s
   Uses
      At line 282 in file RK_PriseEnMain_Moteurs.s
      At line 288 in file RK_PriseEnMain_Moteurs.s

GPIO_I_PUR 00000510

Symbol: GPIO_I_PUR
   Definitions
      At line 35 in file RK_PriseEnMain_Moteurs.s
   Uses
      At line 113 in file RK_PriseEnMain_Moteurs.s
      At line 121 in file RK_PriseEnMain_Moteurs.s

GPIO_O_DEN 0000051C

Symbol: GPIO_O_DEN
   Definitions
      At line 32 in file RK_PriseEnMain_Moteurs.s
   Uses
      At line 105 in file RK_PriseEnMain_Moteurs.s
      At line 117 in file RK_PriseEnMain_Moteurs.s
      At line 125 in file RK_PriseEnMain_Moteurs.s

GPIO_O_DIR 00000400




ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Absolute symbols

Symbol: GPIO_O_DIR
   Definitions
      At line 24 in file RK_PriseEnMain_Moteurs.s
   Uses
      At line 101 in file RK_PriseEnMain_Moteurs.s
Comment: GPIO_O_DIR used once
GPIO_O_DR2R 00000500

Symbol: GPIO_O_DR2R
   Definitions
      At line 28 in file RK_PriseEnMain_Moteurs.s
   Uses
      At line 109 in file RK_PriseEnMain_Moteurs.s
Comment: GPIO_O_DR2R used once
GPIO_PORTD_BASE 40007000

Symbol: GPIO_PORTD_BASE
   Definitions
      At line 21 in file RK_PriseEnMain_Moteurs.s
   Uses
      At line 121 in file RK_PriseEnMain_Moteurs.s
      At line 125 in file RK_PriseEnMain_Moteurs.s
      At line 140 in file RK_PriseEnMain_Moteurs.s
      At line 149 in file RK_PriseEnMain_Moteurs.s
      At line 166 in file RK_PriseEnMain_Moteurs.s
      At line 234 in file RK_PriseEnMain_Moteurs.s
      At line 246 in file RK_PriseEnMain_Moteurs.s
      At line 257 in file RK_PriseEnMain_Moteurs.s

GPIO_PORTE_BASE 40024000

Symbol: GPIO_PORTE_BASE
   Definitions
      At line 19 in file RK_PriseEnMain_Moteurs.s
   Uses
      At line 113 in file RK_PriseEnMain_Moteurs.s
      At line 117 in file RK_PriseEnMain_Moteurs.s
      At line 307 in file RK_PriseEnMain_Moteurs.s
      At line 308 in file RK_PriseEnMain_Moteurs.s

GPIO_PORTF_BASE 40025000

Symbol: GPIO_PORTF_BASE
   Definitions
      At line 17 in file RK_PriseEnMain_Moteurs.s
   Uses
      At line 101 in file RK_PriseEnMain_Moteurs.s
      At line 105 in file RK_PriseEnMain_Moteurs.s
      At line 109 in file RK_PriseEnMain_Moteurs.s
      At line 135 in file RK_PriseEnMain_Moteurs.s
      At line 158 in file RK_PriseEnMain_Moteurs.s
      At line 175 in file RK_PriseEnMain_Moteurs.s
      At line 188 in file RK_PriseEnMain_Moteurs.s
      At line 278 in file RK_PriseEnMain_Moteurs.s

SYSCTL_PERIPH_GPIO 400FE108

Symbol: SYSCTL_PERIPH_GPIO
   Definitions



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Absolute symbols

      At line 15 in file RK_PriseEnMain_Moteurs.s
   Uses
      At line 90 in file RK_PriseEnMain_Moteurs.s
Comment: SYSCTL_PERIPH_GPIO used once
18 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

MOTEUR_DROIT_ARRIERE 00000000

Symbol: MOTEUR_DROIT_ARRIERE
   Definitions
      At line 74 in file RK_PriseEnMain_Moteurs.s
   Uses
      None
Comment: MOTEUR_DROIT_ARRIERE unused
MOTEUR_DROIT_AVANT 00000000

Symbol: MOTEUR_DROIT_AVANT
   Definitions
      At line 73 in file RK_PriseEnMain_Moteurs.s
   Uses
      At line 196 in file RK_PriseEnMain_Moteurs.s
Comment: MOTEUR_DROIT_AVANT used once
MOTEUR_DROIT_INVERSE 00000000

Symbol: MOTEUR_DROIT_INVERSE
   Definitions
      At line 75 in file RK_PriseEnMain_Moteurs.s
   Uses
      None
Comment: MOTEUR_DROIT_INVERSE unused
MOTEUR_DROIT_OFF 00000000

Symbol: MOTEUR_DROIT_OFF
   Definitions
      At line 72 in file RK_PriseEnMain_Moteurs.s
   Uses
      At line 315 in file RK_PriseEnMain_Moteurs.s
      At line 325 in file RK_PriseEnMain_Moteurs.s

MOTEUR_DROIT_ON 00000000

Symbol: MOTEUR_DROIT_ON
   Definitions
      At line 71 in file RK_PriseEnMain_Moteurs.s
   Uses
      At line 193 in file RK_PriseEnMain_Moteurs.s
Comment: MOTEUR_DROIT_ON used once
MOTEUR_GAUCHE_ARRIERE 00000000

Symbol: MOTEUR_GAUCHE_ARRIERE
   Definitions
      At line 80 in file RK_PriseEnMain_Moteurs.s
   Uses
      None
Comment: MOTEUR_GAUCHE_ARRIERE unused
MOTEUR_GAUCHE_AVANT 00000000

Symbol: MOTEUR_GAUCHE_AVANT
   Definitions
      At line 79 in file RK_PriseEnMain_Moteurs.s
   Uses
      At line 197 in file RK_PriseEnMain_Moteurs.s
Comment: MOTEUR_GAUCHE_AVANT used once
MOTEUR_GAUCHE_INVERSE 00000000




ARM Macro Assembler    Page 2 Alphabetic symbol ordering
External symbols

Symbol: MOTEUR_GAUCHE_INVERSE
   Definitions
      At line 81 in file RK_PriseEnMain_Moteurs.s
   Uses
      None
Comment: MOTEUR_GAUCHE_INVERSE unused
MOTEUR_GAUCHE_OFF 00000000

Symbol: MOTEUR_GAUCHE_OFF
   Definitions
      At line 78 in file RK_PriseEnMain_Moteurs.s
   Uses
      At line 314 in file RK_PriseEnMain_Moteurs.s
      At line 324 in file RK_PriseEnMain_Moteurs.s

MOTEUR_GAUCHE_ON 00000000

Symbol: MOTEUR_GAUCHE_ON
   Definitions
      At line 77 in file RK_PriseEnMain_Moteurs.s
   Uses
      At line 194 in file RK_PriseEnMain_Moteurs.s
Comment: MOTEUR_GAUCHE_ON used once
MOTEUR_INIT 00000000

Symbol: MOTEUR_INIT
   Definitions
      At line 69 in file RK_PriseEnMain_Moteurs.s
   Uses
      At line 131 in file RK_PriseEnMain_Moteurs.s
Comment: MOTEUR_INIT used once
11 symbols
396 symbols in table
